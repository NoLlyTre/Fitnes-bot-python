import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import sqlite3
import datetime
import plotly.graph_objects as go
import io
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiosqlite
from contextlib import asynccontextmanager
from typing import AsyncGenerator
import logging.handlers
import sys
from aiogram import BaseMiddleware
from collections import defaultdict
import time
import random

TOKEN = "7997378459:AAE4Sd0D-Sjbf-bvEfub7cHeVSIStKLMjuc"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.handlers.RotatingFileHandler(
            'bot.log',
            maxBytes=10485760,  # 10MB
            backupCount=5,
            encoding='utf-8'
        )
    ]
)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class DatabasePool:
    def __init__(self, database_name: str):
        self.database_name = database_name
        self._pool = []
        self.max_connections = 10
        
    @asynccontextmanager
    async def acquire(self) -> AsyncGenerator[aiosqlite.Connection, None]:
        if not self._pool:
            conn = await aiosqlite.connect(self.database_name)
            await conn.execute("PRAGMA journal_mode=WAL")  # –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        else:
            conn = self._pool.pop()
            
        try:
            yield conn
        except Exception as e:
            logger.error(f"Database error: {e}")
            await conn.rollback()
            raise
        else:
            await conn.commit()
        finally:
            if len(self._pool) < self.max_connections:
                self._pool.append(conn)
            else:
                await conn.close()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—É–ª–∞
db_pool = DatabasePool('fitness_bot.db')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
async def execute_db_query(query: str, params: tuple = None, fetch: bool = False):
    async with db_pool.acquire() as conn:
        try:
            cursor = await conn.execute(query, params or ())
            if fetch:
                return await cursor.fetchall()
            return None
        except Exception as e:
            logger.error(f"Database query error: {query}, params: {params}, error: {e}")
            raise

class UserStates(StatesGroup):
    WAITING_FOR_WEIGHT = State()
    WAITING_FOR_CALORIES = State()
    WAITING_FOR_MEAL = State()

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")],
        [KeyboardButton(text="ü•ó –î–∏–µ—Ç–∞")],
        [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é")],
        [KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")],
        [KeyboardButton(text="üç¥ –†–µ—Ü–µ–ø—Ç—ã")]
    ],
    resize_keyboard=True
)

recipes_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîª –†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è")],
        [KeyboardButton(text="üî∫ –†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

weight_loss_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="ü•ó –°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π")],
        [KeyboardButton(text="üêü –ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏")],
        [KeyboardButton(text="ü•ë –ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç —Å —è–π—Ü–æ–º")],
        [KeyboardButton(text="üç≤ –û–≤–æ—â–Ω–æ–π —Å—É–ø")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞")],
    ],
    resize_keyboard=True
)

weight_gain_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="ü•© –°—Ç–µ–π–∫ —Å —Ä–∏—Å–æ–º")],
        [KeyboardButton(text="ü•ú –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π —Å–º—É–∑–∏")],
        [KeyboardButton(text="üçó –ü–∞—Å—Ç–∞ —Å –∫—É—Ä–∏—Ü–µ–π")],
        [KeyboardButton(text="ü•û –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –±–ª–∏–Ω—ã")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞")],
    ],
    resize_keyboard=True
)

tracking_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏")],
        [KeyboardButton(text="‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å")],
        [KeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")],
        [KeyboardButton(text="üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
cancel_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

# Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, rate_limit=1):
        self.rate_limit = rate_limit
        self.users = defaultdict(lambda: {"last_request": 0, "request_count": 0})
        
    async def __call__(self, handler, event: types.Message, data):
        user_id = event.from_user.id
        current_time = time.time()
        user_data = self.users[user_id]
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å–µ–∫—É–Ω–¥—ã
        if current_time - user_data["last_request"] > 1:
            user_data["request_count"] = 0
            
        user_data["request_count"] += 1
        user_data["last_request"] = current_time
        
        if user_data["request_count"] > self.rate_limit:
            await event.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
            return
            
        return await handler(event, data)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
dp.message.middleware(ThrottlingMiddleware())

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "1. üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã.\n"
        "2. ü•ó –î–∏–µ—Ç–∞ ‚Äî —Å–æ–≤–µ—Ç—ã –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é —Ä–∞—Ü–∏–æ–Ω–∞.\n"
        "3. üí° –°–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é ‚Äî –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
        "4. üìà –ü—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –∫–∞–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n"
        "5. üç¥ –†–µ—Ü–µ–ø—Ç—ã ‚Äî –∑–¥–æ—Ä–æ–≤—ã–µ –∏ –≤–∫—É—Å–Ω—ã–µ –±–ª—é–¥–∞.",
        reply_markup=keyboard
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
async def get_random_quote() -> str:
    try:
        with open('quotes.txt', 'r', encoding='utf-8') as file:
            quotes = file.readlines()
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
        quotes = [quote.strip() for quote in quotes if quote.strip()]
        return random.choice(quotes)
    except Exception as e:
        logger.error(f"Error reading quotes file: {e}")
        return "\"–°–∞–º—ã–π —Ç—Ä—É–¥–Ω—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ –Ω–∞—á–∞–ª–æ, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ—â–µ!\""

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
@dp.message(lambda message: message.text == "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")
async def send_motivation(message: types.Message):
    try:
        quote = await get_random_quote()
        await message.answer(
            "–ú–æ—Ç–∏–≤–∞—Ü–∏—è ‚Äî —ç—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å:\n"
            "- –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –≤ –¥–µ–π—Å—Ç–≤–∏—è—Ö ‚Äî –≥–ª–∞–≤–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è —É—Å–ø–µ—Ö–∞.\n"
            "- –°—Ç–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π –∏—Ö.\n"
            "- –ù–µ –±–æ–π—Å—è –Ω–µ—É–¥–∞—á ‚Äî –∫–∞–∂–¥—ã–π —à–∞–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —É—Å–ø–µ—Ö—É.\n\n"
            f"–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è: {quote} üí´"
        )
    except Exception as e:
        logger.error(f"Error in send_motivation for user {message.from_user.id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã. "
            "–ù–æ –ø–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üí™"
        )

@dp.message(lambda message: message.text == "ü•ó –î–∏–µ—Ç–∞")
async def send_diet(message: types.Message):
    await message.answer(
        "–î–∏–µ—Ç–∞ ‚Äî —ç—Ç–æ –Ω–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –∞ —Å–ø–æ—Å–æ–± –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –∏ —ç–Ω–µ—Ä–≥–∏–∏.\n"
        "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è:\n"
        "- –†–∞–∑–¥–µ–ª—è–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –Ω–∞ 5-6 –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.\n"
        "- –ü–µ–π –º–Ω–æ–≥–æ –≤–æ–¥—ã ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º—É –∏ —É–ª—É—á—à–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ. üíß\n"
        "- –í–∫–ª—é—á–∞–π –≤ —Ä–∞—Ü–∏–æ–Ω –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤. üçéü•¶\n"
        "- –û–≥—Ä–∞–Ω–∏—á—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞ –∏ –ø—Ä–æ—Å—Ç—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤. üö´üç¨\n"
        "–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ –∑–¥–æ—Ä–æ–≤–∞—è –¥–∏–µ—Ç–∞ ‚Äî —ç—Ç–æ –Ω–µ –¥–∏–µ—Ç–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é, –∞ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏! ü•ë"
    )

@dp.message(lambda message: message.text == "üí° –°–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é")
async def send_health_tips(message: types.Message):
    await message.answer(
        "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è:\n"
        "- –ü–µ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (2-3 –ª–∏—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Å–∞). üíß\n"
        "- –ó–∞–Ω–∏–º–∞–π—Å—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —Ö–æ—Ç—è –±—ã 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å. üèÉ‚Äç‚ôÇÔ∏è\n"
        "- –°–ø–∏ –Ω–µ –º–µ–Ω–µ–µ 7-8 —á–∞—Å–æ–≤ ‚Äî —Ö–æ—Ä–æ—à–∏–π —Å–æ–Ω —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –æ—Ä–≥–∞–Ω–∏–∑–º–∞. üò¥\n"
        "- –°–ª–µ–¥–∏ –∑–∞ —É—Ä–æ–≤–Ω–µ–º —Å—Ç—Ä–µ—Å—Å–∞ –∏ –æ—Ç–¥—ã—Ö–∞–π, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. üßò‚Äç‚ôÄÔ∏è\n"
        "- –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ—Å–º–æ—Ç—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π. ü©∫"
    )
    
@dp.message(lambda message: message.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def progress_menu(message: types.Message):
    await message.answer(
        "–ú–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:",
        reply_markup=tracking_keyboard
    )

@dp.message(lambda message: message.text == "üç¥ –†–µ—Ü–µ–ø—Ç—ã")
async def send_recipes(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —Ü–µ–ª–∏: üéØ",
        reply_markup=recipes_keyboard
    )

@dp.message(lambda message: message.text == "üîª –†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è")
async def weight_loss_recipes(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è: ü•ó",
        reply_markup=weight_loss_keyboard
    )

@dp.message(lambda message: message.text == "üî∫ –†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã")
async def weight_gain_recipes(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã: üí™",
        reply_markup=weight_gain_keyboard
    )

def calculate_portions(weight: float, recipe_type: str) -> dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ä—Ü–∏–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    base_weight = 70  # –±–∞–∑–æ–≤—ã–π –≤–µ—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    multiplier = weight / base_weight
    
    recipes = {
        "ü•ó –°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π": {
            "base": {
                "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞": 150,
                "–õ–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞": 50,
                "–ü–æ–º–∏–¥–æ—Ä—ã": 100,
                "–û–≥—É—Ä—Ü—ã": 100,
                "–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ": 15
            },
            "calories_per_100g": 120,
            "instructions": "1. –û—Ç–≤–∞—Ä–∏—Ç–µ –∫—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É\n2. –ù–∞—Ä–µ–∂—å—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n3. –ó–∞–ø—Ä–∞–≤—å—Ç–µ –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º"
        },
        "ü•© –°—Ç–µ–π–∫ —Å —Ä–∏—Å–æ–º": {
            "base": {
                "–ì–æ–≤—è–∂–∏–π —Å—Ç–µ–π–∫": 200,
                "–†–∏—Å": 150,
                "–û–≤–æ—â–∏": 100,
                "–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ": 20
            },
            "calories_per_100g": 250,
            "instructions": "1. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Ä–∏—Å\n2. –û–±–∂–∞—Ä—å—Ç–µ —Å—Ç–µ–π–∫ –¥–æ –∂–µ–ª–∞–µ–º–æ–π –ø—Ä–æ–∂–∞—Ä–∫–∏\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –æ–≤–æ—â–∞–º–∏"
        }
    }
    
    if recipe_type not in recipes:
        return None
        
    recipe = recipes[recipe_type]
    result = {
        "ingredients": {},
        "calories": 0,
        "instructions": recipe["instructions"]
    }
    
    for ingredient, amount in recipe["base"].items():
        adjusted_amount = round(amount * multiplier)
        result["ingredients"][ingredient] = adjusted_amount
    
    total_weight = sum(result["ingredients"].values())
    result["calories"] = round(total_weight * recipe["calories_per_100g"] / 100)
    
    return result

@dp.message(lambda message: message.text in ["ü•ó –°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π", "ü•© –°—Ç–µ–π–∫ —Å —Ä–∏—Å–æ–º"])
async def send_recipe_details(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        weight_record = await execute_db_query(
            """SELECT weight FROM weight_records 
               WHERE user_id = ? 
               ORDER BY date DESC LIMIT 1""",
            (message.from_user.id,),
            fetch=True
        )
        
        if not weight_record:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ü—Ä–æ–≥—Ä–µ—Å—Å' -> '‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å'"
            )
            return
            
        weight = weight_record[0][0]
        recipe = calculate_portions(weight, message.text)
        
        if not recipe:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–µ—Ü–µ–ø—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞
        recipe_text = f"{message.text}\n\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ä–∞—Å—á–µ—Ç –Ω–∞ {weight} –∫–≥ –≤–µ—Å–∞):\n"
        for ingredient, amount in recipe["ingredients"].items():
            recipe_text += f"- {ingredient}: {amount} –≥\n"
        
        recipe_text += f"\n–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø–æ—Ä—Ü–∏–∏: {recipe['calories']} –∫–∫–∞–ª"
        
        if "–°–∞–ª–∞—Ç" in message.text:
            recipe_text += "\n\n–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n" + recipe["instructions"]
        elif "–°—Ç–µ–π–∫" in message.text:
            recipe_text += "\n\n–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n" + recipe["instructions"]
        
        await message.answer(recipe_text)
    except Exception as e:
        logger.error(f"Error in send_recipe_details for user {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞")
async def back_to_recipe_type(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–æ–≤:",
        reply_markup=recipes_keyboard
    )

@dp.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=keyboard)

@dp.message(lambda message: message.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏")
async def record_meal(message: types.Message, state: FSMContext):
    await state.set_state(UserStates.WAITING_FOR_MEAL)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—ë–º–µ –ø–∏—â–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–¢–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫/–æ–±–µ–¥/—É–∂–∏–Ω/–ø–µ—Ä–µ–∫—É—Å) - –∫–∞–ª–æ—Ä–∏–∏\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞–∫ - 500\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∞",
        reply_markup=cancel_keyboard
    )

@dp.message(UserStates.WAITING_FOR_MEAL)
async def process_meal(message: types.Message, state: FSMContext):
    try:
        meal_type, calories = message.text.split('-')
        meal_type = meal_type.strip().lower()
        calories = int(calories.strip())
        
        await execute_db_query(
            "INSERT INTO meal_records (user_id, meal_type, calories, date) VALUES (?, ?, ?, ?)",
            (message.from_user.id, meal_type, calories, datetime.datetime.now().strftime('%Y-%m-%d'))
        )
        
        await message.answer("–ü—Ä–∏—ë–º –ø–∏—â–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω! üìù", reply_markup=tracking_keyboard)
        await state.clear()
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∑–∞–≤—Ç—Ä–∞–∫ - 500\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è",
            reply_markup=cancel_keyboard
        )
    except Exception as e:
        logger.error(f"Error in process_meal for user {message.from_user.id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=tracking_keyboard
        )
        await state.clear()

@dp.message(lambda message: message.text == "‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å")
async def update_weight(message: types.Message, state: FSMContext):
    await state.set_state(UserStates.WAITING_FOR_WEIGHT)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∞",
        reply_markup=cancel_keyboard
    )

@dp.message(UserStates.WAITING_FOR_WEIGHT)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight < 30 or weight > 300:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 300 –∫–≥)\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è",
                reply_markup=cancel_keyboard
            )
            return

        await execute_db_query(
            "INSERT INTO weight_records (user_id, weight, date) VALUES (?, ?, ?)",
            (message.from_user.id, weight, datetime.datetime.now().strftime('%Y-%m-%d'))
        )

        await message.answer(f"–í–µ—Å {weight} –∫–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω! üìù", reply_markup=tracking_keyboard)
        await state.clear()
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è",
            reply_markup=cancel_keyboard
        )
    except Exception as e:
        logger.error(f"Error in process_weight for user {message.from_user.id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=tracking_keyboard
        )
        await state.clear()

@dp.message(lambda message: message.text == "üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π")
async def set_calories_goal(message: types.Message, state: FSMContext):
    await state.set_state(UserStates.WAITING_FOR_CALORIES)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –Ω–∞ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000)\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∞",
        reply_markup=cancel_keyboard
    )

@dp.message(UserStates.WAITING_FOR_CALORIES)
async def process_calories_goal(message: types.Message, state: FSMContext):
    try:
        calories = int(message.text)
        if calories < 1200 or calories > 5000:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–ª—å (–æ—Ç 1200 –¥–æ 5000 –∫–∫–∞–ª)\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è",
                reply_markup=cancel_keyboard
            )
            return

        await execute_db_query(
            "INSERT OR REPLACE INTO users (user_id, target_calories) VALUES (?, ?)",
            (message.from_user.id, calories)
        )

        await message.answer(f"–¶–µ–ª—å {calories} –∫–∫–∞–ª –≤ –¥–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! üéØ", reply_markup=tracking_keyboard)
        await state.clear()
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000)\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è",
            reply_markup=cancel_keyboard
        )
    except Exception as e:
        logger.error(f"Error in process_calories_goal for user {message.from_user.id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=tracking_keyboard
        )
        await state.clear()

@dp.message(lambda message: message.text == "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def show_statistics(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
        target_result = await execute_db_query(
            "SELECT target_calories FROM users WHERE user_id = ?",
            (message.from_user.id,),
            fetch=True
        )
        target_calories = target_result[0][0] if target_result else 2000

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–ª–æ—Ä–∏–π
        calories_data = await execute_db_query(
            """SELECT date, SUM(calories) 
               FROM meal_records 
               WHERE user_id = ? AND date >= date('now', '-7 days')
               GROUP BY date ORDER BY date""",
            (message.from_user.id,),
            fetch=True
        )
        
        dates = [row[0] for row in calories_data]
        calories = [row[1] for row in calories_data]

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ—Å–∞
        weight_data = await execute_db_query(
            """SELECT date, weight
               FROM weight_records
               WHERE user_id = ?
               AND date >= date('now', '-7 days')
               ORDER BY date""",
            (message.from_user.id,),
            fetch=True
        )
        
        weight_dates = [row[0] for row in weight_data]
        weights = [row[1] for row in weight_data]
        
        if not dates and not weight_dates:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –¥–≤—É–º—è –æ—Å—è–º–∏ Y
        fig = go.Figure()

        if dates:
            # –ì—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π
            fig.add_trace(go.Scatter(
                x=dates,
                y=calories,
                mode='lines+markers',
                name='–ö–∞–ª–æ—Ä–∏–∏',
                line=dict(color='blue')
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ü–µ–ª–∏
            fig.add_hline(
                y=target_calories,
                line_dash="dash",
                line_color="red",
                annotation_text=f"–¶–µ–ª—å: {target_calories} –∫–∫–∞–ª"
            )

        if weight_dates:
            # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞
            fig.add_trace(go.Scatter(
                x=weight_dates,
                y=weights,
                mode='lines+markers',
                name='–í–µ—Å (–∫–≥)',
                yaxis='y2',
                line=dict(color='green')
            ))

        fig.update_layout(
            title='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π',
            xaxis_title='–î–∞—Ç–∞',
            yaxis_title='–ö–∞–ª–æ—Ä–∏–∏',
            yaxis2=dict(
                title='–í–µ—Å (–∫–≥)',
                overlaying='y',
                side='right'
            ),
            template='plotly_white'
        )

        img_bytes = fig.to_image(format="png")
        buf = io.BytesIO(img_bytes)
        buf.seek(0)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
        
        # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ –±—É—Ñ–µ—Ä–∞
        input_file = types.BufferedInputFile(
            buf.getvalue(),
            filename="statistics.png"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n\n"
        
        if dates:
            avg_calories = sum(calories) / len(calories)
            report += f"–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π: {int(avg_calories)} –∫–∫–∞–ª\n"
            report += f"–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {target_calories} –∫–∫–∞–ª\n"
        
        if weight_dates:
            latest_weight = weights[-1]
            first_weight = weights[0]
            weight_diff = latest_weight - first_weight
            report += f"\n–¢–µ–∫—É—â–∏–π –≤–µ—Å: {latest_weight} –∫–≥\n"
            if weight_diff != 0:
                report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {weight_diff:+.1f} –∫–≥"

        await message.answer_photo(input_file, caption=report)
        
    except Exception as e:
        logger.error(f"Error in show_statistics for user {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=keyboard
    )

@dp.message(lambda message: message.text in [
    "üêü –ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏",
    "ü•ë –ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç —Å —è–π—Ü–æ–º",
    "üç≤ –û–≤–æ—â–Ω–æ–π —Å—É–ø",
    "ü•ú –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π —Å–º—É–∑–∏",
    "üçó –ü–∞—Å—Ç–∞ —Å –∫—É—Ä–∏—Ü–µ–π",
    "ü•û –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –±–ª–∏–Ω—ã"
])
async def send_other_recipe_details(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å
    recipes = {
        "üêü –ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏": {
            "base": {
                "–†—ã–±–∞ (—Ñ–∏–ª–µ)": 200,
                "–ë—Ä–æ–∫–∫–æ–ª–∏": 100,
                "–ú–æ—Ä–∫–æ–≤—å": 100,
                "–õ–∏–º–æ–Ω": 30,
                "–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ": 15
            },
            "calories_per_100g": 130,
            "instructions": "1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ñ–∏–ª–µ —Ä—ã–±—ã\n2. –ù–∞—Ä–µ–∂—å—Ç–µ –æ–≤–æ—â–∏\n3. –ó–∞–ø–µ–∫–∞–π—Ç–µ 20-25 –º–∏–Ω—É—Ç –ø—Ä–∏ 180¬∞C"
        },
        "ü•ë –ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç —Å —è–π—Ü–æ–º": {
            "base": {
                "–ê–≤–æ–∫–∞–¥–æ": 100,
                "–¶–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π —Ö–ª–µ–±": 60,
                "–Ø–π—Ü–æ": 60,
                "–ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏": 50,
                "–ó–µ–ª–µ–Ω—å": 10
            },
            "calories_per_100g": 220,
            "instructions": "1. –ü–æ–¥–∂–∞—Ä—å—Ç–µ —Ö–ª–µ–±\n2. –†–∞–∑–æ–º–Ω–∏—Ç–µ –∞–≤–æ–∫–∞–¥–æ\n3. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —è–π—Ü–æ –ø–∞—à–æ—Ç\n4. –°–æ–±–µ—Ä–∏—Ç–µ —Ç–æ—Å—Ç"
        },
        "üç≤ –û–≤–æ—â–Ω–æ–π —Å—É–ø": {
            "base": {
                "–ú–æ—Ä–∫–æ–≤—å": 100,
                "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å": 150,
                "–õ—É–∫": 50,
                "–°–µ–ª—å–¥–µ—Ä–µ–π": 50,
                "–ó–µ–ª–µ–Ω—å": 20
            },
            "calories_per_100g": 45,
            "instructions": "1. –ù–∞—Ä–µ–∂—å—Ç–µ –æ–≤–æ—â–∏\n2. –í–∞—Ä–∏—Ç–µ 30 –º–∏–Ω—É—Ç\n3. –î–æ–±–∞–≤—å—Ç–µ –∑–µ–ª–µ–Ω—å –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π"
        },
        "ü•ú –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π —Å–º—É–∑–∏": {
            "base": {
                "–ë–∞–Ω–∞–Ω": 120,
                "–ü—Ä–æ—Ç–µ–∏–Ω": 30,
                "–ú–æ–ª–æ–∫–æ": 250,
                "–ê—Ä–∞—Ö–∏—Å–æ–≤–∞—è –ø–∞—Å—Ç–∞": 30,
                "–û–≤—Å—è–Ω–∫–∞": 30
            },
            "calories_per_100g": 150,
            "instructions": "1. –°–º–µ—à–∞–π—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n2. –í–∑–±–µ–π—Ç–µ –≤ –±–ª–µ–Ω–¥–µ—Ä–µ\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É"
        },
        "üçó –ü–∞—Å—Ç–∞ —Å –∫—É—Ä–∏—Ü–µ–π": {
            "base": {
                "–ü–∞—Å—Ç–∞ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–∞—è": 100,
                "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞": 200,
                "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å": 100,
                "–ü–∞—Ä–º–µ–∑–∞–Ω": 30,
                "–ë–∞–∑–∏–ª–∏–∫": 10
            },
            "calories_per_100g": 180,
            "instructions": "1. –û—Ç–≤–∞—Ä–∏—Ç–µ –ø–∞—Å—Ç—É\n2. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∫—É—Ä–∏—Ü—É\n3. –°–º–µ—à–∞–π—Ç–µ —Å —Å–æ—É—Å–æ–º"
        },
        "ü•û –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –±–ª–∏–Ω—ã": {
            "base": {
                "–û–≤—Å—è–Ω–∞—è –º—É–∫–∞": 100,
                "–ü—Ä–æ—Ç–µ–∏–Ω": 30,
                "–Ø–π—Ü–æ": 60,
                "–ú–æ–ª–æ–∫–æ": 200,
                "–ú–µ–¥": 20
            },
            "calories_per_100g": 200,
            "instructions": "1. –°–º–µ—à–∞–π—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n2. –í—ã–ø–µ–∫–∞–π—Ç–µ –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ\n3. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –º–µ–¥–æ–º"
        }
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        weight_record = await execute_db_query(
            """SELECT weight FROM weight_records 
               WHERE user_id = ? 
               ORDER BY date DESC LIMIT 1""",
            (message.from_user.id,),
            fetch=True
        )
        
        if not weight_record:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ü—Ä–æ–≥—Ä–µ—Å—Å' -> '‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å'"
            )
            return
            
        weight = weight_record[0][0]
        recipe = recipes.get(message.text)
        
        if not recipe:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–µ—Ü–µ–ø—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä—Ü–∏–∏
        multiplier = weight / 70  # –±–∞–∑–æ–≤—ã–π –≤–µ—Å 70 –∫–≥
        adjusted_ingredients = {
            ingredient: round(amount * multiplier)
            for ingredient, amount in recipe["base"].items()
        }
        
        total_weight = sum(adjusted_ingredients.values())
        total_calories = round(total_weight * recipe["calories_per_100g"] / 100)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞
        recipe_text = f"{message.text}\n\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ä–∞—Å—á–µ—Ç –Ω–∞ {weight} –∫–≥ –≤–µ—Å–∞):\n"
        for ingredient, amount in adjusted_ingredients.items():
            recipe_text += f"- {ingredient}: {amount} –≥\n"
        
        recipe_text += f"\n–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø–æ—Ä—Ü–∏–∏: {total_calories} –∫–∫–∞–ª"
        recipe_text += f"\n\n–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n{recipe['instructions']}"
        
        await message.answer(recipe_text)
        
    except Exception as e:
        logger.error(f"Error in send_other_recipe_details for user {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def init_db():
    queries = [
        '''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            target_calories INTEGER DEFAULT 2000,
            target_weight REAL,
            preferences TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''',
        '''CREATE TABLE IF NOT EXISTS weight_records (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            weight REAL,
            date TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )''',
        '''CREATE TABLE IF NOT EXISTS meal_records (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            meal_type TEXT,
            calories INTEGER,
            date TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )''',
        'CREATE INDEX IF NOT EXISTS idx_weight_records_user_date ON weight_records(user_id, date)',
        'CREATE INDEX IF NOT EXISTS idx_meal_records_user_date ON meal_records(user_id, date)'
    ]
    
    for query in queries:
        await execute_db_query(query)

async def main():
    try:
        logger.info("Starting bot...")
        await init_db()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è webhook
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types(),
            close_bot_session=True
        )
    except Exception as e:
        logger.error(f"Critical error: {e}")
        sys.exit(1)
    finally:
        logger.info("Bot stopped")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped by user")
