import asyncio
import logging
import random
import sys
import platform
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import BOT_TOKEN, WORKOUT_TYPES, HEALTH_TIPS, INACTIVITY_TIMEOUT
from database import Database
from workout_manager import WorkoutSession
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from aiogram.fsm.storage.memory import MemoryStorage
from handlers import register_handlers
from states import UserStates
from collections import defaultdict
import signal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏–π–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è Windows
if platform.system() == 'Windows':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
active_sessions = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–ø–∞–º–∞
spam_control = defaultdict(lambda: {"count": 0, "last_message_time": None})
SPAM_LIMIT = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
SPAM_TIME_WINDOW = 3  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
SPAM_BLOCK_TIME = 30  # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
bot_is_running = True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

async def spam_middleware(handler, event, data):
    """Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞"""
    if not bot_is_running:
        return
        
    if isinstance(event, types.Message):
        user_id = event.from_user.id
        current_time = datetime.now()
        user_data = spam_control[user_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_data.get("blocked_until"):
            if current_time < user_data["blocked_until"]:
                remaining_time = (user_data["blocked_until"] - current_time).seconds
                await event.answer(f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥.")
                return
            else:
                # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data["blocked_until"] = None
                user_data["count"] = 0

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        if user_data["last_message_time"]:
            time_diff = (current_time - user_data["last_message_time"]).seconds
            if time_diff < SPAM_TIME_WINDOW:
                user_data["count"] += 1
            else:
                user_data["count"] = 1
        else:
            user_data["count"] = 1

        user_data["last_message_time"] = current_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
        if user_data["count"] > SPAM_LIMIT:
            user_data["blocked_until"] = current_time + timedelta(seconds=SPAM_BLOCK_TIME)
            await event.answer(f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {SPAM_BLOCK_TIME} —Å–µ–∫—É–Ω–¥ –∑–∞ —Å–ø–∞–º.")
            return

    # –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
    return await handler(event, data)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
dp.message.outer_middleware(spam_middleware)

def handle_shutdown(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    global bot_is_running
    bot_is_running = False
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, handle_shutdown)
signal.signal(signal.SIGTERM, handle_shutdown)

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    builder.add(InlineKeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="menu_workouts"))
    builder.add(InlineKeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="menu_progress"))
    builder.add(InlineKeyboardButton(text="üç≥ –ü–∏—Ç–∞–Ω–∏–µ", callback_data="menu_nutrition"))
    builder.add(InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="menu_reminders"))
    builder.add(InlineKeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã", callback_data="menu_tips"))
    
    builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    return builder.as_markup()

def get_workouts_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    builder = InlineKeyboardBuilder()
    
    for key, value in WORKOUT_TYPES.items():
        builder.add(InlineKeyboardButton(text=value, callback_data=f"workout_{key}"))
    
    builder.add(InlineKeyboardButton(text="üìã –ú–æ–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="my_programs"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    builder.adjust(2)
    return builder.as_markup()

def get_progress_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(text="‚öñÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å", callback_data="record_weight"))
    builder.add(InlineKeyboardButton(text="üìè –ó–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è", callback_data="record_measurements"))
    builder.add(InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_statistics"))
    builder.add(InlineKeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data="show_progress_graph"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    builder.adjust(2)
    return builder.as_markup()

def get_reminders_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(text="üèãÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö", callback_data="workout_reminders"))
    builder.add(InlineKeyboardButton(text="üçΩ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏", callback_data="meal_reminders"))
    builder.add(InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="reminder_settings"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    builder.adjust(2)
    return builder.as_markup()

def get_tips_keyboard():
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(text="üèãÔ∏è –°–æ–≤–µ—Ç—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workout_tips"))
    builder.add(InlineKeyboardButton(text="ü•ó –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é", callback_data="nutrition_tips"))
    builder.add(InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="motivation_tips"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    builder.adjust(2)
    return builder.as_markup()

def get_exercise_keyboard(session: WorkoutSession):
    builder = InlineKeyboardBuilder()
    
    if session.current_exercise > 0:
        builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", callback_data="prev_exercise"))
    
    if session.current_exercise < len(session.exercises) - 1:
        builder.add(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data="next_exercise"))
    
    builder.add(InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end_workout"))
    builder.adjust(2)
    return builder.as_markup()

async def check_inactive_sessions():
    while True:
        to_remove = []
        for user_id, session in active_sessions.items():
            if session.is_inactive(INACTIVITY_TIMEOUT):
                to_remove.append(user_id)
        
        for user_id in to_remove:
            del active_sessions[user_id]
            try:
                await bot.send_message(
                    user_id,
                    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await asyncio.sleep(60)

async def main():
    await db.create_tables()
    await register_handlers(dp)
    
    asyncio.create_task(check_inactive_sessions())
    
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        global bot_is_running
        bot_is_running = False
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
