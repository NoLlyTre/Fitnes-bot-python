import logging
import asyncio
import sqlite3
import datetime
import sys
import time
import random
import aiosqlite
from aiogram import Bot, Dispatcher, types, BaseMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from contextlib import asynccontextmanager
from typing import AsyncGenerator
import logging.handlers
from collections import defaultdict
import os

TOKEN = "–∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @botfather"

bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.handlers.RotatingFileHandler(
            'bot.log',
            maxBytes=10485760,
            backupCount=5,
            encoding='utf-8'
        )
    ]
)

logger = logging.getLogger(__name__)

class DatabasePool:
    def __init__(self, database_name: str):
        self.database_name = database_name
        self._pool = []
        self.max_connections = 10
        
    @asynccontextmanager
    async def acquire(self) -> AsyncGenerator[aiosqlite.Connection, None]:
        if not self._pool:
            conn = await aiosqlite.connect(self.database_name)
            await conn.execute("PRAGMA journal_mode=WAL")
        else:
            conn = self._pool.pop()
            
        try:
            yield conn
        except Exception as e:
            logger.error(f"Database error: {e}")
            await conn.rollback()
            raise
        else:
            await conn.commit()
        finally:
            if len(self._pool) < self.max_connections:
                self._pool.append(conn)
            else:
                await conn.close()

db_pool = DatabasePool('fitness_bot.db')

async def execute_db_query(query: str, params: tuple = None, fetch: bool = False):
    async with db_pool.acquire() as conn:
        try:
            cursor = await conn.execute(query, params or ())
            if fetch:
                return await cursor.fetchall()
            return None
        except Exception as e:
            logger.error(f"Database query error: {query}, params: {params}, error: {e}")
            raise

class UserStates(StatesGroup):
    WAITING_FOR_WEIGHT = State()
    WAITING_FOR_CALORIES = State()
    WAITING_FOR_MEAL = State()

# –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –∏–Ω–ª–∞–π–Ω –≤–µ—Ä—Å–∏–∏
main_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="motivation")],
        [InlineKeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="workout")],
        [InlineKeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é", callback_data="health_tips")],
        [InlineKeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
        [InlineKeyboardButton(text="üç¥ –†–µ—Ü–µ–ø—Ç—ã", callback_data="recipes")]
    ]
)

muscle_groups_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="ü¶æ –†—É–∫–∏", callback_data="muscles_arms"),
            InlineKeyboardButton(text="ü¶µ –ù–æ–≥–∏", callback_data="muscles_legs")
        ],
        [
            InlineKeyboardButton(text="ü´Å –ì—Ä—É–¥—å", callback_data="muscles_chest"),
            InlineKeyboardButton(text="üîô –°–ø–∏–Ω–∞", callback_data="muscles_back")
        ],
        [
            InlineKeyboardButton(text="ü¶¥ –ü–ª–µ—á–∏", callback_data="muscles_shoulders"),
            InlineKeyboardButton(text="üí™ –ü—Ä–µ—Å—Å", callback_data="muscles_abs")
        ],
        [InlineKeyboardButton(text="üîÑ –í—Å–µ —Ç–µ–ª–æ", callback_data="muscles_full")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
)

recipes_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîª –†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è", callback_data="recipes_loss")],
        [InlineKeyboardButton(text="üî∫ –†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã", callback_data="recipes_gain")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
)

weight_loss_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="ü•ó –°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π", callback_data="recipe_chicken_salad")],
        [InlineKeyboardButton(text="üêü –ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏", callback_data="recipe_fish")],
        [InlineKeyboardButton(text="ü•ë –ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç —Å —è–π—Ü–æ–º", callback_data="recipe_avocado")],
        [InlineKeyboardButton(text="üç≤ –û–≤–æ—â–Ω–æ–π —Å—É–ø", callback_data="recipe_veggie_soup")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞", callback_data="back_to_recipes")]
    ]
)

weight_gain_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="ü•© –°—Ç–µ–π–∫ —Å —Ä–∏—Å–æ–º", callback_data="recipe_steak")],
        [InlineKeyboardButton(text="ü•ú –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π —Å–º—É–∑–∏", callback_data="recipe_smoothie")],
        [InlineKeyboardButton(text="üçó –ü–∞—Å—Ç–∞ —Å –∫—É—Ä–∏—Ü–µ–π", callback_data="recipe_pasta")],
        [InlineKeyboardButton(text="ü•û –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –±–ª–∏–Ω—ã", callback_data="recipe_pancakes")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞", callback_data="back_to_recipes")]
    ]
)

tracking_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏", callback_data="record_meal")],
        [InlineKeyboardButton(text="‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å", callback_data="update_weight")],
        [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="show_stats")],
        [InlineKeyboardButton(text="üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π", callback_data="set_calories")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
)

cancel_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
)

class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, rate_limit=1):
        self.rate_limit = rate_limit
        self.users = defaultdict(lambda: {"last_request": 0, "request_count": 0})
        
    async def __call__(self, handler, event: types.Message, data):
        user_id = event.from_user.id
        current_time = time.time()
        user_data = self.users[user_id]
        
        if current_time - user_data["last_request"] > 1:
            user_data["request_count"] = 0
            
        user_data["request_count"] += 1
        user_data["last_request"] = current_time
        
        if user_data["request_count"] > self.rate_limit:
            await event.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
            return
            
        return await handler(event, data)

dp.message.middleware(ThrottlingMiddleware())

last_shown_plan = {}

exercises = {
    "ü¶æ –†—É–∫–∏": [
        [
            {
                "name": "–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞",
                "description": "3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12-15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                             "1. –ü—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –ª—ë–∂–∞\n"
                             "2. –û–ø—É—Å—Ç–∏—Ç–µ—Å—å, —Å–≥–∏–±–∞—è —Ä—É–∫–∏ –≤ –ª–æ–∫—Ç—è—Ö\n"
                             "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                "image": "https://i.imgur.com/07aHFUN.jpg"
            },
            {
                "name": "–°–≥–∏–±–∞–Ω–∏—è —Ä—É–∫ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏",
                "description": "4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10-12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                             "1. –í–æ–∑—å–º–∏—Ç–µ –≥–∞–Ω—Ç–µ–ª–∏\n"
                             "2. –°–≥–∏–±–∞–π—Ç–µ —Ä—É–∫–∏, –ø–æ–¥–Ω–∏–º–∞—è –≤–µ—Å –∫ –ø–ª–µ—á–∞–º\n"
                             "3. –ú–µ–¥–ª–µ–Ω–Ω–æ –æ–ø—É—Å–∫–∞–π—Ç–µ",
                "image": "https://i.imgur.com/Knwq7Ob.jpg"
            }
        ]
    ],
    "ü¶µ –ù–æ–≥–∏": [
        [
            {
                "name": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è",
                "description": "4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15-20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                             "1. –í—Å—Ç–∞–Ω—å—Ç–µ, –Ω–æ–≥–∏ –Ω–∞ —à–∏—Ä–∏–Ω–µ –ø–ª–µ—á\n"
                             "2. –û–ø—É—Å—Ç–∏—Ç–µ—Å—å, —Å–≥–∏–±–∞—è –∫–æ–ª–µ–Ω–∏\n"
                             "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                "image": "https://i.imgur.com/d8BbB6g.jpg"
            },
            {
                "name": "–í—ã–ø–∞–¥—ã",
                "description": "3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É\n"
                             "1. –°–¥–µ–ª–∞–π—Ç–µ —à–∞–≥ –≤–ø–µ—Ä–µ–¥\n"
                             "2. –û–ø—É—Å—Ç–∏—Ç–µ—Å—å, —Å–≥–∏–±–∞—è –∫–æ–ª–µ–Ω–∏\n"
                             "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                "image": "https://i.imgur.com/rzk9UVG.jpg"
            }
        ]
    ],
    "ü´Å –ì—Ä—É–¥—å": [
        [
            {
                "name": "–û—Ç–∂–∏–º–∞–Ω–∏—è —Å —à–∏—Ä–æ–∫–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π",
                "description": "4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12-15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                             "1. –ü—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –ª—ë–∂–∞, —Ä—É–∫–∏ —à–∏—Ä–µ –ø–ª–µ—á\n"
                             "2. –û–ø—É—Å—Ç–∏—Ç–µ—Å—å, —Å–≥–∏–±–∞—è —Ä—É–∫–∏\n"
                             "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                "image": "https://i.imgur.com/0sGbRRS.jpg"
            }
        ]
    ],
    "üîô –°–ø–∏–Ω–∞": [
        [
            {
                "name": "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è",
                "description": "3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ –º–∞–∫—Å–∏–º—É–º—É\n"
                             "1. –í–æ–∑—å–º–∏—Ç–µ—Å—å –∑–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω—É\n"
                             "2. –ü–æ–¥—Ç—è–Ω–∏—Ç–µ—Å—å –¥–æ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞\n"
                             "3. –ú–µ–¥–ª–µ–Ω–Ω–æ –æ–ø—É—Å—Ç–∏—Ç–µ—Å—å",
                "image": "https://i.imgur.com/hiro87U.jpg"
            }
        ]
    ],
    "ü¶¥ –ü–ª–µ—á–∏": [
        [
            {
                "name": "–ê—Ä–º–µ–π—Å–∫–∏–π –∂–∏–º",
                "description": "4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10-12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                             "1. –í–æ–∑—å–º–∏—Ç–µ –≥–∞–Ω—Ç–µ–ª–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–ª–µ—á\n"
                             "2. –í—ã–∂–º–∏—Ç–µ –≤–µ—Å –≤–≤–µ—Ä—Ö\n"
                             "3. –ú–µ–¥–ª–µ–Ω–Ω–æ –æ–ø—É—Å—Ç–∏—Ç–µ",
                "image": "https://i.imgur.com/f2869dN.jpg"
            }
        ]
    ],
    "üí™ –ü—Ä–µ—Å—Å": [
        [
            {
                "name": "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è",
                "description": "3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                             "1. –õ—è–≥—Ç–µ –Ω–∞ —Å–ø–∏–Ω—É\n"
                             "2. –ü–æ–¥–Ω–∏–º–∏—Ç–µ –∫–æ—Ä–ø—É—Å, –Ω–∞–ø—Ä—è–≥–∞—è –ø—Ä–µ—Å—Å\n"
                             "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                "image": "https://i.imgur.com/w5uO4kj.jpg"
            }
        ]
    ],
    "üîÑ –í—Å–µ —Ç–µ–ª–æ": [
        [
            {
                "name": "–ë–µ—Ä–ø–∏",
                "description": "3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                             "1. –ü—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –ª—ë–∂–∞\n"
                             "2. –°–¥–µ–ª–∞–π—Ç–µ –æ—Ç–∂–∏–º–∞–Ω–∏–µ\n"
                             "3. –ü—Ä—ã–∂–∫–æ–º –ø—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –ø—Ä–∏—Å–µ–≤\n"
                             "4. –í—ã–ø—Ä—ã–≥–Ω–∏—Ç–µ –≤–≤–µ—Ä—Ö",
                "image": "https://i.imgur.com/Oeb2bMc.jpg"
            }
        ]
    ]
}

exercise_recommendations = {
    "ü¶æ –†—É–∫–∏": {
        "tips": [
            "üîπ –í—Å–µ–≥–¥–∞ —Ä–∞–∑–º–∏–Ω–∞–π—Ç–µ –ª–æ–∫—Ç–µ–≤—ã–µ —Å—É—Å—Ç–∞–≤—ã –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π",
            "üîπ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –ª–æ–∫—Ç–∏ –Ω–µ —Ä–∞—Å—Ö–æ–¥–∏–ª–∏—Å—å –≤ —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–∏ –æ—Ç–∂–∏–º–∞–Ω–∏—è—Ö",
            "üîπ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥–≤–∏–∂–µ–Ω–∏—è –≤ –ø–æ–ª–Ω–æ–π –∞–º–ø–ª–∏—Ç—É–¥–µ",
            "üîπ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —Ñ–∞–∑—É –¥–≤–∏–∂–µ–Ω–∏—è (–æ–ø—É—Å–∫–∞–Ω–∏–µ)",
            "üîπ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –≤–µ—Å - —Ç–µ—Ö–Ω–∏–∫–∞ –≤–∞–∂–Ω–µ–µ"
        ],
        "technique": "–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ä—É–∫:\n"
                    "1. –ß–µ—Ä–µ–¥—É–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –±–∏—Ü–µ–ø—Å –∏ —Ç—Ä–∏—Ü–µ–ø—Å\n"
                    "2. –î–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—É 1-2 —Å–µ–∫—É–Ω–¥—ã –≤ –ø–∏–∫–æ–≤–æ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏\n"
                    "3. –ù–µ —Ä–∞—Å–∫–∞—á–∏–≤–∞–π—Ç–µ—Å—å –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"
    },
    "ü¶µ –ù–æ–≥–∏": {
        "tips": [
            "üîπ –ö–æ–ª–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –Ω–æ—Å–∫–∏ –ø—Ä–∏ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è—Ö",
            "üîπ –î–µ—Ä–∂–∏—Ç–µ —Å–ø–∏–Ω—É –ø—Ä—è–º–æ–π –≤–æ –≤—Ä–µ–º—è –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π",
            "üîπ –ü—Ä–∏–∑–µ–º–ª—è–π—Ç–µ—Å—å –º—è–≥–∫–æ –ø–æ—Å–ª–µ –ø—Ä—ã–∂–∫–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π",
            "üîπ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≤–µ—Å–∞ –Ω–∞ —Å—Ç–æ–ø–∞—Ö",
            "üîπ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞—Å—Ç—è–∂–∫—É –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        ],
        "technique": "–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –Ω–æ–≥:\n"
                    "1. –ù–∞—á–∏–Ω–∞–π—Ç–µ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç –±–µ–¥–µ—Ä, –∞ –Ω–µ –∫–æ–ª–µ–Ω\n"
                    "2. –û–ø—É—Å–∫–∞–π—Ç–µ—Å—å –≤ –ø—Ä–∏—Å–µ–¥ –¥–æ –ø–∞—Ä–∞–ª–ª–µ–ª–∏ —Å –ø–æ–ª–æ–º\n"
                    "3. –°—Ç–æ–ø—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–ª–µ–≥–∫–∞ –Ω–∞—Ä—É–∂—É"
    },
    "ü´Å –ì—Ä—É–¥—å": {
        "tips": [
            "üîπ –°–≤–æ–¥–∏—Ç–µ –ª–æ–ø–∞—Ç–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º",
            "üîπ –ù–µ –æ–ø—É—Å–∫–∞–π—Ç–µ –ª–æ–∫—Ç–∏ –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –≥—Ä—É–¥–∏",
            "üîπ –î–µ—Ä–∂–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–∏–± –≤ –ø–æ—è—Å–Ω–∏—Ü–µ",
            "üîπ –î—ã—à–∏—Ç–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ: –≤—ã–¥–æ—Ö –Ω–∞ —É—Å–∏–ª–∏–∏",
            "üîπ –ú–µ–Ω—è–π—Ç–µ —É–≥–ª—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏"
        ],
        "technique": "–¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –≥—Ä—É–¥—å:\n"
                    "1. –û–ø—É—Å–∫–∞–π—Ç–µ—Å—å –º–µ–¥–ª–µ–Ω–Ω–æ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ\n"
                    "2. –ù–µ —Ä–∞–∑–≤–æ–¥–∏—Ç–µ –ª–æ–∫—Ç–∏ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–æ\n"
                    "3. –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø—Ä—è–º–ª—è–π—Ç–µ —Ä—É–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —Ç–æ—á–∫–µ"
    },
    "üîô –°–ø–∏–Ω–∞": {
        "tips": [
            "üîπ –ù–∞—á–∏–Ω–∞–π—Ç–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å –æ—Ç—Ç—è–≥–∏–≤–∞–Ω–∏—è –ª–æ–ø–∞—Ç–æ–∫ –≤–Ω–∏–∑",
            "üîπ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–µ—Ä—Ü–∏—é —Ç–µ–ª–∞",
            "üîπ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –º—ã—à—Ü —Å–ø–∏–Ω—ã",
            "üîπ –î–µ—Ä–∂–∏—Ç–µ –≤–∑–≥–ª—è–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –≤–ø–µ—Ä–µ–¥",
            "üîπ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å —Å–ø–∏–Ω—ã"
        ],
        "technique": "–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —Å–ø–∏–Ω—ã:\n"
                    "1. –¢—è–Ω–∏—Ç–µ –≤–µ—Å –ª–æ–∫—Ç—è–º–∏, –∞ –Ω–µ –±–∏—Ü–µ–ø—Å–∞–º–∏\n"
                    "2. –î–µ—Ä–∂–∏—Ç–µ –≥—Ä—É–¥—å —Ä–∞—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π\n"
                    "3. –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞—Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤–æ –≤—Ä–µ–º—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"
    },
    "ü¶¥ –ü–ª–µ—á–∏": {
        "tips": [
            "üîπ –ù–µ –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ –≤–µ—Å —Ä—ã–≤–∫–∞–º–∏",
            "üîπ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –ª–æ–∫—Ç–µ–π",
            "üîπ –î–µ—Ä–∂–∏—Ç–µ –∫–æ—Ä–ø—É—Å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º",
            "üîπ –ù–µ –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ —Ä—É–∫–∏ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –ø–ª–µ—á –ø—Ä–∏ –±–æ–∫–æ–≤—ã—Ö –ø–æ–¥—ä–µ–º–∞—Ö",
            "üîπ –†–∞–∑–º–∏–Ω–∞–π—Ç–µ –ø–ª–µ—á–µ–≤—ã–µ —Å—É—Å—Ç–∞–≤—ã –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π"
        ],
        "technique": "–¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ –ø–ª–µ—á–∏:\n"
                    "1. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –ª–µ–≥–∫–æ–≥–æ –≤–µ—Å–∞ –¥–ª—è —Ä–∞–∑–º–∏–Ω–∫–∏\n"
                    "2. –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø–∞—É–∑—É –≤ –≤–µ—Ä—Ö–Ω–µ–π —Ç–æ—á–∫–µ\n"
                    "3. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ–ø—É—Å–∫–∞–Ω–∏–∏ –≤–µ—Å–∞"
    },
    "üí™ –ü—Ä–µ—Å—Å": {
        "tips": [
            "üîπ –ù–µ —Ç—è–Ω–∏—Ç–µ —Å–µ–±—è –∑–∞ —à–µ—é –ø—Ä–∏ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è—Ö",
            "üîπ –î–µ—Ä–∂–∏—Ç–µ –ø–æ—è—Å–Ω–∏—Ü—É –ø—Ä–∏–∂–∞—Ç–æ–π –∫ –ø–æ–ª—É",
            "üîπ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω–æ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ",
            "üîπ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –¥—ã—Ö–∞–Ω–∏–µ–º",
            "üîπ –ß–µ—Ä–µ–¥—É–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π –ø—Ä–µ—Å—Å"
        ],
        "technique": "–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–µ—Å—Å–∞:\n"
                    "1. –ù–∞–ø—Ä—è–≥–∞–π—Ç–µ –º—ã—à—Ü—ã –∂–∏–≤–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º\n"
                    "2. –î–µ–ª–∞–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏–ª—É –º—ã—à—Ü, –∞ –Ω–µ –∏–Ω–µ—Ä—Ü–∏—é\n"
                    "3. –î–µ—Ä–∂–∏—Ç–µ –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫ —Å–ª–µ–≥–∫–∞ –ø—Ä–∏–ø–æ–¥–Ω—è—Ç—ã–º"
    },
    "üîÑ –í—Å–µ —Ç–µ–ª–æ": {
        "tips": [
            "üîπ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ",
            "üîπ –î–µ–ª–∞–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏",
            "üîπ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ—Ö–Ω–∏–∫–æ–π –¥–∞–∂–µ –ø—Ä–∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏",
            "üîπ –ü–µ–π—Ç–µ –≤–æ–¥—É –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏",
            "üîπ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –±–æ–ª–µ–µ –ª–µ–≥–∫–æ–π –≤–µ—Ä—Å–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"
        ],
        "technique": "–¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
                    "1. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å —Ä–∞–∑–º–∏–Ω–∫–∏ –≤—Å–µ–≥–æ —Ç–µ–ª–∞\n"
                    "2. –ß–µ—Ä–µ–¥—É–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü\n"
                    "3. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—É–ª—å—Å–æ–º –∏ –Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä—è–≥–∞–π—Ç–µ—Å—å"
    }
}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "1. üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã\n"
        "2. üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "3. üí° –°–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é ‚Äî –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "4. üìà –ü—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –∫–∞–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "5. üç¥ –†–µ—Ü–µ–ø—Ç—ã ‚Äî –∑–¥–æ—Ä–æ–≤—ã–µ –∏ –≤–∫—É—Å–Ω—ã–µ –±–ª—é–¥–∞"
    )
    
    try:
        await message.answer(welcome_text, reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"Error sending welcome message: {e}")

async def init_db():
    queries = [
        '''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            target_calories INTEGER DEFAULT 2000,
            target_weight REAL,
            preferences TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''',
        '''CREATE TABLE IF NOT EXISTS weight_records (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            weight REAL,
            date TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )''',
        '''CREATE TABLE IF NOT EXISTS meal_records (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            meal_type TEXT,
            calories INTEGER,
            date TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )''',
        '''CREATE TABLE IF NOT EXISTS shown_quotes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            quote_text TEXT,
            shown_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )''',
        'CREATE INDEX IF NOT EXISTS idx_weight_records_user_date ON weight_records(user_id, date)',
        'CREATE INDEX IF NOT EXISTS idx_meal_records_user_date ON meal_records(user_id, date)',
        'CREATE INDEX IF NOT EXISTS idx_shown_quotes_user ON shown_quotes(user_id)'
    ]
    
    for query in queries:
        await execute_db_query(query)

async def get_random_quote(user_id: int) -> str:
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        quotes_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'quotes.txt')
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
        with open(quotes_path, 'r', encoding='utf-8') as file:
            all_quotes = [quote.strip() for quote in file.readlines() if quote.strip()]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        shown_quotes = await execute_db_query(
            "SELECT quote_text FROM shown_quotes WHERE user_id = ?",
            (user_id,),
            fetch=True
        )
        shown_quotes_set = {quote[0] for quote in shown_quotes}
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
        available_quotes = [quote for quote in all_quotes if quote not in shown_quotes_set]
        
        # –ï—Å–ª–∏ –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã, –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if not available_quotes:
            await execute_db_query(
                "DELETE FROM shown_quotes WHERE user_id = ?",
                (user_id,)
            )
            available_quotes = all_quotes
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        quote = random.choice(available_quotes)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        await execute_db_query(
            "INSERT INTO shown_quotes (user_id, quote_text) VALUES (?, ?)",
            (user_id, quote)
        )
        
        return quote
    except Exception as e:
        logger.error(f"Error reading quotes file: {e}")
        return "\"–°–∞–º—ã–π —Ç—Ä—É–¥–Ω—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ –Ω–∞—á–∞–ª–æ, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ—â–µ!\""

@dp.message(lambda message: message.text == "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")
async def send_motivation(message: types.Message):
    try:
        quote = await get_random_quote(message.from_user.id)
        await message.answer(
            "–ú–æ—Ç–∏–≤–∞—Ü–∏—è ‚Äî —ç—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å:\n"
            "- –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –≤ –¥–µ–π—Å—Ç–≤–∏—è—Ö ‚Äî –≥–ª–∞–≤–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è —É—Å–ø–µ—Ö–∞.\n"
            "- –°—Ç–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π –∏—Ö.\n"
            "- –ù–µ –±–æ–π—Å—è –Ω–µ—É–¥–∞—á ‚Äî –∫–∞–∂–¥—ã–π —à–∞–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —É—Å–ø–µ—Ö—É.\n\n"
            f"–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è: {quote} üí´"
        )
    except Exception as e:
        logger.error(f"Error in send_motivation for user {message.from_user.id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã. "
            "–ù–æ –ø–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üí™"
        )

@dp.message(lambda message: message.text == "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def show_muscle_groups(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=muscle_groups_keyboard
    )

@dp.message(lambda message: message.text in exercises.keys())
async def show_exercises(message: types.Message):
    try:
        muscle_group = message.text
        all_plans = exercises[muscle_group]
        
        current_plan_index = last_shown_plan.get(muscle_group, -1)
        
        next_plan_index = (current_plan_index + 1) % len(all_plans)
        last_shown_plan[muscle_group] = next_plan_index
        
        workout = all_plans[next_plan_index]
        
        await message.answer(
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ {next_plan_index + 1} –¥–ª—è {muscle_group}:"
        )
        
        for exercise in workout:
            try:
                await message.answer_photo(
                    photo=exercise["image"],
                    caption=f"*{exercise['name']}*\n\n{exercise['description']}",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"Error sending exercise image: {e}")
                await message.answer(
                    f"*{exercise['name']}*\n\n{exercise['description']}",
                    parse_mode="Markdown"
                )
        
        recommendations = exercise_recommendations.get(muscle_group, {})
        if recommendations:
            tips_text = "\n".join(recommendations["tips"])
            technique_text = recommendations["technique"]
            
            await message.answer(
                f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {muscle_group}:\n\n"
                f"{tips_text}\n\n"
                f"‚ö°Ô∏è –¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
                f"{technique_text}"
            )
        
    except Exception as e:
        logger.error(f"Error in show_exercises: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(lambda message: message.text == "üí° –°–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é")
async def send_health_tips(message: types.Message):
    await message.answer(
        "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è:\n"
        "- –ü–µ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (2-3 –ª–∏—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Å–∞). üíß\n"
        "- –ó–∞–Ω–∏–º–∞–π—Å—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —Ö–æ—Ç—è –±—ã 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å. üèÉ‚Äç‚ôÇÔ∏è\n"
        "- –°–ø–∏ –Ω–µ –º–µ–Ω–µ–µ 7-8 —á–∞—Å–æ–≤ ‚Äî —Ö–æ—Ä–æ—à–∏–π —Å–æ–Ω —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –æ—Ä–≥–∞–Ω–∏–∑–º–∞. üò¥\n"
        "- –°–ª–µ–¥–∏ –∑–∞ —É—Ä–æ–≤–Ω–µ–º —Å—Ç—Ä–µ—Å—Å–∞ –∏ –æ—Ç–¥—ã—Ö–∞–π, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. üßò‚Äç‚ôÄÔ∏è\n"
        "- –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ—Å–º–æ—Ç—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π. ü©∫"
    )
    
@dp.message(lambda message: message.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def progress_menu(message: types.Message):
    await message.answer(
        "–ú–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:",
        reply_markup=tracking_keyboard
    )

@dp.message(lambda message: message.text == "üç¥ –†–µ—Ü–µ–ø—Ç—ã")
async def send_recipes(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —Ü–µ–ª–∏: üéØ",
        reply_markup=recipes_keyboard
    )

@dp.message(lambda message: message.text == "üîª –†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è")
async def weight_loss_recipes(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è: ü•ó",
        reply_markup=weight_loss_keyboard
    )

@dp.message(lambda message: message.text == "üî∫ –†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã")
async def weight_gain_recipes(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã: üí™",
        reply_markup=weight_gain_keyboard
    )

def calculate_portions(weight: float, recipe_name: str) -> dict:
    base_recipes = {
        "ü•ó –°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π": {
            "base_weight": 70,
            "ingredients": {
                "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥—å": lambda w: int(w * 1.5),
                "–õ–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞": lambda w: int(w * 2),
                "–ü–æ–º–∏–¥–æ—Ä—ã": lambda w: int(w * 1),
                "–û–≥—É—Ä—Ü—ã": lambda w: int(w * 1),
                "–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ": lambda w: int(w * 0.2)
            },
            "calories": lambda w: int(w * 3),
            "instructions": "1. –û—Ç–≤–∞—Ä–∏—Ç–µ –∫—É—Ä–∏–Ω—É—é –≥—Ä—É–¥—å\n2. –ù–∞—Ä–µ–∂—å—Ç–µ –æ–≤–æ—â–∏\n3. –°–º–µ—à–∞–π—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n4. –ó–∞–ø—Ä–∞–≤—å—Ç–µ –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º"
        },
        "üêü –ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏": {
            "base_weight": 70,
            "ingredients": {
                "–§–∏–ª–µ —Ä—ã–±—ã": lambda w: int(w * 2),
                "–ë—Ä–æ–∫–∫–æ–ª–∏": lambda w: int(w * 1.5),
                "–ú–æ—Ä–∫–æ–≤—å": lambda w: int(w * 1),
                "–õ—É–∫": lambda w: int(w * 0.5),
                "–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ": lambda w: int(w * 0.2)
            },
            "calories": lambda w: int(w * 2.5),
            "instructions": "1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ñ–∏–ª–µ —Ä—ã–±—ã\n2. –ù–∞—Ä–µ–∂—å—Ç–µ –æ–≤–æ—â–∏\n3. –í—ã–ª–æ–∂–∏—Ç–µ –≤—Å–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–µ–Ω—å\n4. –ó–∞–ø–µ–∫–∞–π—Ç–µ 20-25 –º–∏–Ω—É—Ç –ø—Ä–∏ 180¬∞C"
        },
        "ü•ë –ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç —Å —è–π—Ü–æ–º": {
            "base_weight": 70,
            "ingredients": {
                "–¶–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π —Ö–ª–µ–±": lambda w: int(w * 0.5),
                "–ê–≤–æ–∫–∞–¥–æ": lambda w: int(w * 0.5),
                "–Ø–π—Ü–æ": lambda w: 1,
                "–ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏": lambda w: int(w * 0.3),
                "–ó–µ–ª–µ–Ω—å": lambda w: int(w * 0.1)
            },
            "calories": lambda w: int(w * 2),
            "instructions": "1. –ü–æ–¥–∂–∞—Ä—å—Ç–µ —Ö–ª–µ–±\n2. –†–∞–∑–æ–º–Ω–∏—Ç–µ –∞–≤–æ–∫–∞–¥–æ\n3. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —è–π—Ü–æ –ø–∞—à–æ—Ç\n4. –í—ã–ª–æ–∂–∏—Ç–µ –∞–≤–æ–∫–∞–¥–æ –Ω–∞ —Ö–ª–µ–±\n5. –°–≤–µ—Ä—Ö—É –ø–æ–ª–æ–∂–∏—Ç–µ —è–π—Ü–æ –∏ —É–∫—Ä–∞—Å—å—Ç–µ –ø–æ–º–∏–¥–æ—Ä–∞–º–∏ –∏ –∑–µ–ª–µ–Ω—å—é"
        },
        "üç≤ –û–≤–æ—â–Ω–æ–π —Å—É–ø": {
            "base_weight": 70,
            "ingredients": {
                "–ú–æ—Ä–∫–æ–≤—å": lambda w: int(w * 0.7),
                "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å": lambda w: int(w * 1),
                "–ö–∞–ø—É—Å—Ç–∞": lambda w: int(w * 0.8),
                "–õ—É–∫": lambda w: int(w * 0.3),
                "–°–µ–ª—å–¥–µ—Ä–µ–π": lambda w: int(w * 0.3),
                "–ü–æ–º–∏–¥–æ—Ä—ã": lambda w: int(w * 0.5)
            },
            "calories": lambda w: int(w * 1.5),
            "instructions": "1. –ù–∞—Ä–µ–∂—å—Ç–µ –≤—Å–µ –æ–≤–æ—â–∏\n2. –û–±–∂–∞—Ä—å—Ç–µ –ª—É–∫ –∏ –º–æ—Ä–∫–æ–≤—å\n3. –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–≤–æ—â–∏ –∏ –∑–∞–ª–µ–π—Ç–µ –≤–æ–¥–æ–π\n4. –í–∞—Ä–∏—Ç–µ 20-25 –º–∏–Ω—É—Ç\n5. –î–æ–±–∞–≤—å—Ç–µ –∑–µ–ª–µ–Ω—å –ø–æ –≤–∫—É—Å—É"
        },
        "ü•© –°—Ç–µ–π–∫ —Å —Ä–∏—Å–æ–º": {
            "base_weight": 70,
            "ingredients": {
                "–ì–æ–≤—è–∂–∏–π —Å—Ç–µ–π–∫": lambda w: int(w * 2.5),
                "–†–∏—Å": lambda w: int(w * 2),
                "–û–≤–æ—â–∏ –≥—Ä–∏–ª—å": lambda w: int(w * 1.5),
                "–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ": lambda w: int(w * 0.3),
                "–°–ø–µ—Ü–∏–∏": lambda w: int(w * 0.1)
            },
            "calories": lambda w: int(w * 5),
            "instructions": "1. –ó–∞–º–∞—Ä–∏–Ω—É–π—Ç–µ —Å—Ç–µ–π–∫ –≤ —Å–ø–µ—Ü–∏—è—Ö\n2. –û—Ç–≤–∞—Ä–∏—Ç–µ —Ä–∏—Å\n3. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Å—Ç–µ–π–∫ –Ω–∞ –≥—Ä–∏–ª–µ\n4. –û–±–∂–∞—Ä—å—Ç–µ –æ–≤–æ—â–∏\n5. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Å–æ—É—Å–æ–º"
        },
        "ü•ú –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π —Å–º—É–∑–∏": {
            "base_weight": 70,
            "ingredients": {
                "–ë–∞–Ω–∞–Ω": lambda w: int(w * 1.5),
                "–ú–æ–ª–æ–∫–æ": lambda w: int(w * 2.5),
                "–ü—Ä–æ—Ç–µ–∏–Ω": lambda w: int(w * 1),
                "–ê—Ä–∞—Ö–∏—Å–æ–≤–∞—è –ø–∞—Å—Ç–∞": lambda w: int(w * 0.5),
                "–ú–µ–¥": lambda w: int(w * 0.2)
            },
            "calories": lambda w: int(w * 4),
            "instructions": "1. –û—á–∏—Å—Ç–∏—Ç–µ –±–∞–Ω–∞–Ω\n2. –°–º–µ—à–∞–π—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –±–ª–µ–Ω–¥–µ—Ä–µ\n3. –í–∑–±–∏–≤–∞–π—Ç–µ –¥–æ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–π –º–∞—Å—Å—ã\n4. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –ª–µ–¥"
        },
        "üçó –ü–∞—Å—Ç–∞ —Å –∫—É—Ä–∏—Ü–µ–π": {
            "base_weight": 70,
            "ingredients": {
                "–ü–∞—Å—Ç–∞": lambda w: int(w * 2),
                "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞": lambda w: int(w * 2),
                "–°–ª–∏–≤–∫–∏": lambda w: int(w * 1),
                "–ü–∞—Ä–º–µ–∑–∞–Ω": lambda w: int(w * 0.5),
                "–ß–µ—Å–Ω–æ–∫": lambda w: int(w * 0.1)
            },
            "calories": lambda w: int(w * 4.5),
            "instructions": "1. –û—Ç–≤–∞—Ä–∏—Ç–µ –ø–∞—Å—Ç—É\n2. –û–±–∂–∞—Ä—å—Ç–µ –∫—É—Ä–∏—Ü—É —Å —á–µ—Å–Ω–æ–∫–æ–º\n3. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–∏–≤–∫–∏\n4. –°–º–µ—à–∞–π—Ç–µ —Å –ø–∞—Å—Ç–æ–π\n5. –ü–æ—Å—ã–ø—å—Ç–µ —Ç–µ—Ä—Ç—ã–º –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º"
        },
        "ü•û –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –±–ª–∏–Ω—ã": {
            "base_weight": 70,
            "ingredients": {
                "–û–≤—Å—è–Ω–∞—è –º—É–∫–∞": lambda w: int(w * 1.5),
                "–ü—Ä–æ—Ç–µ–∏–Ω": lambda w: int(w * 1),
                "–Ø–π—Ü–∞": lambda w: 2,
                "–ú–æ–ª–æ–∫–æ": lambda w: int(w * 1.5),
                "–ú–µ–¥": lambda w: int(w * 0.3)
            },
            "calories": lambda w: int(w * 3.5),
            "instructions": "1. –°–º–µ—à–∞–π—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n2. –í–∑–±–µ–π—Ç–µ –¥–æ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–π –º–∞—Å—Å—ã\n3. –ñ–∞—Ä—å—Ç–µ –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ\n4. –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –º–µ–¥–æ–º –∏–ª–∏ –¥–∂–µ–º–æ–º"
        }
    }
    
    recipe = base_recipes.get(recipe_name)
    if not recipe:
        return None
        
    result = {
        "ingredients": {},
        "calories": recipe["calories"](weight),
        "instructions": recipe["instructions"]
    }
    
    for ingredient, calc in recipe["ingredients"].items():
        result["ingredients"][ingredient] = calc(weight)
        
    return result

async def send_recipe_details_inline(message: types.Message, recipe_name: str):
    try:
        recipe_images = {
            "ü•ó –°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π": "https://i.imgur.com/ZeKqypn.jpeg",
            "üêü –ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏": "https://i.imgur.com/3sBXm68.jpg",
            "ü•ë –ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç —Å —è–π—Ü–æ–º": "https://i.imgur.com/BADKEq0.jpg",
            "üç≤ –û–≤–æ—â–Ω–æ–π —Å—É–ø": "https://i.imgur.com/Sx86Nvs.jpg",
            "ü•© –°—Ç–µ–π–∫ —Å —Ä–∏—Å–æ–º": "https://i.imgur.com/3pXM5nN.jpg",
            "ü•ú –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π —Å–º—É–∑–∏": "https://i.imgur.com/N2dtgHZ.jpg",
            "üçó –ü–∞—Å—Ç–∞ —Å –∫—É—Ä–∏—Ü–µ–π": "https://i.imgur.com/DAAQd6O.jpg",
            "ü•û –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –±–ª–∏–Ω—ã": "https://i.imgur.com/THYuSsM.jpg"
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–∞ —ç—Ç–æ
        weight_loss_recipes = ["ü•ó –°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π", "üêü –ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏", "ü•ë –ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç —Å —è–π—Ü–æ–º", "üç≤ –û–≤–æ—â–Ω–æ–π —Å—É–ø"]
        is_weight_loss = recipe_name in weight_loss_recipes

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        weight_record = await execute_db_query(
            """SELECT weight FROM weight_records 
               WHERE user_id = ? 
               ORDER BY date DESC LIMIT 1""",
            (message.chat.id,),
            fetch=True
        )
        
        if not weight_record:
            await message.edit_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ü—Ä–æ–≥—Ä–µ—Å—Å' -> '‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å'",
                reply_markup=tracking_keyboard
            )
            return

        weight = weight_record[0][0]
        recipe = calculate_portions(weight, recipe_name)
        
        if recipe:
            recipe_text = f"{recipe_name}\n\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ä–∞—Å—á–µ—Ç –Ω–∞ {weight} –∫–≥ –≤–µ—Å–∞):\n"
            for ingredient, amount in recipe["ingredients"].items():
                recipe_text += f"- {ingredient}: {amount} –≥\n"
            
            recipe_text += f"\n–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø–æ—Ä—Ü–∏–∏: {recipe['calories']} –∫–∫–∞–ª"
            recipe_text += f"\n\n–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n{recipe['instructions']}"
            
            try:
                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.delete()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ —Ä–µ—Ü–µ–ø—Ç–æ–º
                await message.answer_photo(
                    photo=recipe_images[recipe_name],
                    caption=recipe_text,
                    reply_markup=weight_loss_keyboard if is_weight_loss else weight_gain_keyboard
                )
            except Exception as e:
                logger.error(f"Error sending recipe photo: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.answer(
                    recipe_text,
                    reply_markup=weight_loss_keyboard if is_weight_loss else weight_gain_keyboard
                )
        else:
            await message.edit_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–µ—Ü–µ–ø—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=recipes_keyboard
            )
            
    except Exception as e:
        logger.error(f"Error in send_recipe_details_inline: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=recipes_keyboard
        )

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞")
async def back_to_recipe_type(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–æ–≤:",
        reply_markup=recipes_keyboard
    )

@dp.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏")
async def record_meal(message: types.Message, state: FSMContext):
    await state.set_state(UserStates.WAITING_FOR_MEAL)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—ë–º–µ –ø–∏—â–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–¢–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫/–æ–±–µ–¥/—É–∂–∏–Ω/–ø–µ—Ä–µ–∫—É—Å) - –∫–∞–ª–æ—Ä–∏–∏\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞–∫ - 500\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∞",
        reply_markup=cancel_keyboard
    )

@dp.message(UserStates.WAITING_FOR_MEAL)
async def process_meal(message: types.Message, state: FSMContext):
    try:
        meal_type, calories = message.text.split('-')
        meal_type = meal_type.strip().lower()
        calories = int(calories.strip())
        
        await execute_db_query(
            "INSERT INTO meal_records (user_id, meal_type, calories, date) VALUES (?, ?, ?, ?)",
            (message.from_user.id, meal_type, calories, datetime.datetime.now().strftime('%Y-%m-%d'))
        )
        
        await message.answer("–ü—Ä–∏—ë–º –ø–∏—â–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω! üìù", reply_markup=tracking_keyboard)
        await state.clear()
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∑–∞–≤—Ç—Ä–∞–∫ - 500\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è",
            reply_markup=cancel_keyboard
        )
    except Exception as e:
        logger.error(f"Error in process_meal for user {message.from_user.id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=tracking_keyboard
        )
        await state.clear()

@dp.message(lambda message: message.text == "‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å")
async def update_weight(message: types.Message, state: FSMContext):
    await state.set_state(UserStates.WAITING_FOR_WEIGHT)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∞",
        reply_markup=cancel_keyboard
    )

@dp.message(UserStates.WAITING_FOR_WEIGHT)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight < 30 or weight > 300:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 300 –∫–≥)\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è",
                reply_markup=cancel_keyboard
            )
            return

        await execute_db_query(
            "INSERT INTO weight_records (user_id, weight, date) VALUES (?, ?, ?)",
            (message.from_user.id, weight, datetime.datetime.now().strftime('%Y-%m-%d'))
        )

        await message.answer(f"–í–µ—Å {weight} –∫–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω! üìù", reply_markup=tracking_keyboard)
        await state.clear()
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è",
            reply_markup=cancel_keyboard
        )
    except Exception as e:
        logger.error(f"Error in process_weight for user {message.from_user.id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=tracking_keyboard
        )
        await state.clear()

@dp.message(lambda message: message.text == "üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π")
async def set_calories_goal(message: types.Message, state: FSMContext):
    await state.set_state(UserStates.WAITING_FOR_CALORIES)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –Ω–∞ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000)\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∞",
        reply_markup=cancel_keyboard
    )

@dp.message(UserStates.WAITING_FOR_CALORIES)
async def process_calories_goal(message: types.Message, state: FSMContext):
    try:
        calories = int(message.text)
        if calories < 1200 or calories > 5000:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–ª—å (–æ—Ç 1200 –¥–æ 5000 –∫–∫–∞–ª)\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è",
                reply_markup=cancel_keyboard
            )
            return

        await execute_db_query(
            "INSERT OR REPLACE INTO users (user_id, target_calories) VALUES (?, ?)",
            (message.from_user.id, calories)
        )

        await message.answer(f"–¶–µ–ª—å {calories} –∫–∫–∞–ª –≤ –¥–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! üéØ", reply_markup=tracking_keyboard)
        await state.clear()
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000)\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è",
            reply_markup=cancel_keyboard
        )
    except Exception as e:
        logger.error(f"Error in process_calories_goal for user {message.from_user.id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=tracking_keyboard
        )
        await state.clear()

@dp.message(lambda message: message.text == "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def show_statistics(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞
        weight_records = await execute_db_query(
            """SELECT weight, date FROM weight_records 
               WHERE user_id = ? 
               ORDER BY date ASC LIMIT 30""",
            (message.chat.id,),
            fetch=True
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫–∞–ª–æ—Ä–∏–π
        calorie_records = await execute_db_query(
            """SELECT SUM(calories) as total_calories, date 
               FROM meal_records 
               WHERE user_id = ? 
               GROUP BY date 
               ORDER BY date ASC LIMIT 30""",
            (message.chat.id,),
            fetch=True
        )
        
        if not weight_records and not calorie_records:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç –≤–µ—Å–∞ –∏ –ø–∏—Ç–∞–Ω–∏—è!",
                reply_markup=tracking_keyboard
            )
            return
            
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"
        
        if weight_records:
            latest_weight = weight_records[-1][0]
            first_weight = weight_records[0][0]
            weight_change = latest_weight - first_weight
            
            report += f"üí™ –í–µ—Å:\n"
            report += f"–¢–µ–∫—É—â–∏–π: {latest_weight} –∫–≥\n"
            report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {weight_change:+.1f} –∫–≥\n\n"
        
        if calorie_records:
            avg_calories = sum(record[0] for record in calorie_records) / len(calorie_records)
            report += f"üçΩ –ö–∞–ª–æ—Ä–∏–∏:\n"
            report += f"–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {int(avg_calories)} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
            target_result = await execute_db_query(
                "SELECT target_calories FROM users WHERE user_id = ?",
                (message.chat.id,),
                fetch=True
            )
            if target_result:
                target_calories = target_result[0][0]
                report += f"–¶–µ–ª—å: {target_calories} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
        
        await message.answer(report, reply_markup=tracking_keyboard)
        
    except Exception as e:
        logger.error(f"Error showing statistics: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=tracking_keyboard
        )

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_keyboard
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(lambda c: c.data == "motivation")
async def process_motivation_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    quote = await get_random_quote(callback_query.from_user.id)
    try:
        motivation_text = (
            "–ú–æ—Ç–∏–≤–∞—Ü–∏—è ‚Äî —ç—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å:\n"
            "- –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –≤ –¥–µ–π—Å—Ç–≤–∏—è—Ö ‚Äî –≥–ª–∞–≤–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è —É—Å–ø–µ—Ö–∞.\n"
            "- –°—Ç–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π –∏—Ö.\n"
            "- –ù–µ –±–æ–π—Å—è –Ω–µ—É–¥–∞—á ‚Äî –∫–∞–∂–¥—ã–π —à–∞–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —É—Å–ø–µ—Ö—É.\n\n"
            f"–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è: {quote} üí´"
        )
        
        if callback_query.message.photo:
            await callback_query.message.delete()
            await callback_query.message.answer(motivation_text, reply_markup=main_keyboard)
        else:
            try:
                await callback_query.message.edit_text(motivation_text, reply_markup=main_keyboard)
            except Exception as e:
                if "message is not modified" not in str(e):
                    raise
                    
    except Exception as e:
        if "message is not modified" not in str(e):
            logger.error(f"Error in motivation callback: {e}")
            await callback_query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=main_keyboard
            )

@dp.callback_query(lambda c: c.data == "workout")
async def process_workout_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    try:
        if callback_query.message.photo:
            await callback_query.message.delete()
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
                reply_markup=muscle_groups_keyboard
            )
        else:
            await callback_query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
                reply_markup=muscle_groups_keyboard
            )
    except Exception as e:
        logger.error(f"Error in workout callback: {e}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_keyboard
        )

@dp.callback_query(lambda c: c.data == "health_tips")
async def process_health_tips_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    try:
        health_tips_text = (
            "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è:\n"
            "- –ü–µ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (2-3 –ª–∏—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Å–∞). üíß\n"
            "- –ó–∞–Ω–∏–º–∞–π—Å—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —Ö–æ—Ç—è –±—ã 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å. üèÉ‚Äç‚ôÇÔ∏è\n"
            "- –°–ø–∏ –Ω–µ –º–µ–Ω–µ–µ 7-8 —á–∞—Å–æ–≤ ‚Äî —Ö–æ—Ä–æ—à–∏–π —Å–æ–Ω —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –æ—Ä–≥–∞–Ω–∏–∑–º–∞. üò¥\n"
            "- –°–ª–µ–¥–∏ –∑–∞ —É—Ä–æ–≤–Ω–µ–º —Å—Ç—Ä–µ—Å—Å–∞ –∏ –æ—Ç–¥—ã—Ö–∞–π, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. üßò‚Äç‚ôÄÔ∏è\n"
            "- –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ—Å–º–æ—Ç—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π. ü©∫"
        )
        
        if callback_query.message.photo:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.delete()
            await callback_query.message.answer(health_tips_text, reply_markup=main_keyboard)
        else:
            try:
                await callback_query.message.edit_text(health_tips_text, reply_markup=main_keyboard)
            except Exception as e:
                if "message is not modified" not in str(e):
                    raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –æ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                
    except Exception as e:
        if "message is not modified" not in str(e):
            logger.error(f"Error in health tips callback: {e}")
            await callback_query.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=main_keyboard
            )

@dp.callback_query(lambda c: c.data == "progress")
async def process_progress_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    try:
        if callback_query.message.photo:
            await callback_query.message.delete()
            await callback_query.message.answer(
                "–ú–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:",
                reply_markup=tracking_keyboard
            )
        else:
            await callback_query.message.edit_text(
                "–ú–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:",
                reply_markup=tracking_keyboard
            )
    except Exception as e:
        logger.error(f"Error in progress callback: {e}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_keyboard
        )

@dp.callback_query(lambda c: c.data == "recipes")
async def process_recipes_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    try:
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —Ü–µ–ª–∏: üéØ",
            reply_markup=recipes_keyboard
        )
    except Exception as e:
        logger.error(f"Error in recipes callback: {e}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_keyboard
        )

@dp.callback_query(lambda c: c.data == "recipes_loss")
async def process_recipes_loss_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    try:
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è: ü•ó",
            reply_markup=weight_loss_keyboard
        )
    except Exception as e:
        logger.error(f"Error in recipes loss callback: {e}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=recipes_keyboard
        )

@dp.callback_query(lambda c: c.data == "recipes_gain")
async def process_recipes_gain_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    try:
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã: üí™",
            reply_markup=weight_gain_keyboard
        )
    except Exception as e:
        logger.error(f"Error in recipes gain callback: {e}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=recipes_keyboard
        )

@dp.callback_query(lambda c: c.data.startswith("recipe_"))
async def process_recipe_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    try:
        recipe_map = {
            "chicken_salad": "ü•ó –°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π",
            "fish": "üêü –ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏",
            "avocado": "ü•ë –ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç —Å —è–π—Ü–æ–º",
            "veggie_soup": "üç≤ –û–≤–æ—â–Ω–æ–π —Å—É–ø",
            "steak": "ü•© –°—Ç–µ–π–∫ —Å —Ä–∏—Å–æ–º",
            "smoothie": "ü•ú –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π —Å–º—É–∑–∏",
            "pasta": "üçó –ü–∞—Å—Ç–∞ —Å –∫—É—Ä–∏—Ü–µ–π",
            "pancakes": "ü•û –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –±–ª–∏–Ω—ã"
        }
        
        recipe_name = callback_query.data.replace("recipe_", "")
        if recipe_name in recipe_map:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            weight_record = await execute_db_query(
                """SELECT weight FROM weight_records 
                   WHERE user_id = ? 
                   ORDER BY date DESC LIMIT 1""",
                (callback_query.message.chat.id,),
                fetch=True
            )
            
            if not weight_record:
                await callback_query.message.edit_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ü—Ä–æ–≥—Ä–µ—Å—Å' -> '‚öñÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å'",
                    reply_markup=tracking_keyboard
                )
                return

            weight = weight_record[0][0]
            mapped_recipe_name = recipe_map[recipe_name]
            recipe = calculate_portions(weight, mapped_recipe_name)
            
            if recipe:
                recipe_text = f"{mapped_recipe_name}\n\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ä–∞—Å—á–µ—Ç –Ω–∞ {weight} –∫–≥ –≤–µ—Å–∞):\n"
                for ingredient, amount in recipe["ingredients"].items():
                    recipe_text += f"- {ingredient}: {amount} –≥\n"
                
                recipe_text += f"\n–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø–æ—Ä—Ü–∏–∏: {recipe['calories']} –∫–∫–∞–ª"
                recipe_text += f"\n\n–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n{recipe['instructions']}"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ü–µ–ø—Ç–∞
                is_weight_loss = recipe_name in ["chicken_salad", "fish", "avocado", "veggie_soup"]
                keyboard = weight_loss_keyboard if is_weight_loss else weight_gain_keyboard

                recipe_images = {
                    "ü•ó –°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π": "https://i.imgur.com/ZeKqypn.jpeg",
                    "üêü –ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏": "https://i.imgur.com/3sBXm68.jpg",
                    "ü•ë –ê–≤–æ–∫–∞–¥–æ-—Ç–æ—Å—Ç —Å —è–π—Ü–æ–º": "https://i.imgur.com/BADKEq0.jpg",
                    "üç≤ –û–≤–æ—â–Ω–æ–π —Å—É–ø": "https://i.imgur.com/Sx86Nvs.jpg",
                    "ü•© –°—Ç–µ–π–∫ —Å —Ä–∏—Å–æ–º": "https://i.imgur.com/3pXM5nN.jpg",
                    "ü•ú –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π —Å–º—É–∑–∏": "https://i.imgur.com/N2dtgHZ.jpg",
                    "üçó –ü–∞—Å—Ç–∞ —Å –∫—É—Ä–∏—Ü–µ–π": "https://i.imgur.com/DAAQd6O.jpg",
                    "ü•û –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –±–ª–∏–Ω—ã": "https://i.imgur.com/THYuSsM.jpg"
                }

                try:
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback_query.message.delete()
                    
                    # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    photo_url = recipe_images[mapped_recipe_name]
                    logger.info(f"Attempting to send photo for recipe {mapped_recipe_name} with URL {photo_url}")
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                    new_message = await callback_query.message.answer_photo(
                        photo=photo_url,
                        caption=recipe_text,
                        reply_markup=keyboard
                    )
                    
                    logger.info(f"Successfully sent photo for recipe {mapped_recipe_name}")
                    
                except Exception as e:
                    logger.error(f"Error sending recipe photo for {mapped_recipe_name}: {str(e)}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await callback_query.message.answer(
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Ä–µ—Ü–µ–ø—Ç–∞.\n\n{recipe_text}",
                        reply_markup=keyboard
                    )
            else:
                await callback_query.message.edit_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–µ—Ü–µ–ø—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    reply_markup=recipes_keyboard
                )
        else:
            await callback_query.message.edit_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=recipes_keyboard
            )
    except Exception as e:
        logger.error(f"Error in recipe callback: {str(e)}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=recipes_keyboard
        )

@dp.callback_query(lambda c: c.data == "record_meal")
async def process_record_meal_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.set_state(UserStates.WAITING_FOR_MEAL)
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—ë–º–µ –ø–∏—â–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–¢–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫/–æ–±–µ–¥/—É–∂–∏–Ω/–ø–µ—Ä–µ–∫—É—Å) - –∫–∞–ª–æ—Ä–∏–∏\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞–∫ - 500",
        reply_markup=cancel_keyboard
    )

@dp.callback_query(lambda c: c.data == "update_weight")
async def process_update_weight_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.set_state(UserStates.WAITING_FOR_WEIGHT)
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)",
        reply_markup=cancel_keyboard
    )

@dp.callback_query(lambda c: c.data == "show_stats")
async def process_show_stats_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    try:
        await show_statistics(callback_query.message)
    except Exception as e:
        logger.error(f"Error in show stats callback: {e}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=tracking_keyboard
        )

@dp.callback_query(lambda c: c.data == "set_calories")
async def process_set_calories_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.set_state(UserStates.WAITING_FOR_CALORIES)
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –Ω–∞ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000)",
        reply_markup=cancel_keyboard
    )

@dp.callback_query(lambda c: c.data == "cancel")
async def process_cancel_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await callback_query.message.edit_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=main_keyboard
        )
    else:
        await callback_query.message.edit_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=main_keyboard
        )

@dp.callback_query(lambda c: c.data == "back_to_recipes")
async def process_back_to_recipes_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    try:
        if callback_query.message.photo:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback_query.message.delete()
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —Ü–µ–ª–∏: üéØ",
                reply_markup=recipes_keyboard
            )
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            await callback_query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —Ü–µ–ª–∏: üéØ",
                reply_markup=recipes_keyboard
            )
    except Exception as e:
        logger.error(f"Error in back to recipes callback: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —Ü–µ–ª–∏: üéØ",
            reply_markup=recipes_keyboard
        )

@dp.callback_query(lambda c: c.data == "back_to_main")
async def process_back_to_main_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_keyboard
    )

@dp.callback_query(lambda c: c.data.startswith("muscles_"))
async def process_muscles_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    try:
        muscle_group_map = {
            "muscles_arms": "ü¶æ –†—É–∫–∏",
            "muscles_legs": "ü¶µ –ù–æ–≥–∏",
            "muscles_chest": "ü´Å –ì—Ä—É–¥—å",
            "muscles_back": "üîô –°–ø–∏–Ω–∞",
            "muscles_shoulders": "ü¶¥ –ü–ª–µ—á–∏",
            "muscles_abs": "üí™ –ü—Ä–µ—Å—Å",
            "muscles_full": "üîÑ –í—Å–µ —Ç–µ–ª–æ"
        }
        
        muscle_group = muscle_group_map.get(callback_query.data)
        if not muscle_group:
            await callback_query.message.edit_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=muscle_groups_keyboard
            )
            return
            
        all_plans = exercises[muscle_group]
        current_plan_index = last_shown_plan.get(muscle_group, -1)
        next_plan_index = (current_plan_index + 1) % len(all_plans)
        last_shown_plan[muscle_group] = next_plan_index
        
        workout = all_plans[next_plan_index]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        exercise_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"next_exercise_{muscle_group}_0")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º—ã—à—Ü", callback_data="workout")]
        ])
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –ø–µ—Ä–≤—ã–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º
        exercise = workout[0]
        await callback_query.message.answer_photo(
            photo=exercise["image"],
            caption=f"üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ {next_plan_index + 1} –¥–ª—è {muscle_group}:\n\n"
                   f"*{exercise['name']}*\n\n{exercise['description']}",
            reply_markup=exercise_keyboard,
            parse_mode="Markdown"
        )
            
    except Exception as e:
        logger.error(f"Error in muscles callback: {e}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=muscle_groups_keyboard
        )

@dp.callback_query(lambda c: c.data.startswith("next_exercise_"))
async def process_next_exercise(callback_query: types.CallbackQuery):
    await callback_query.answer()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ callback_data
        _, _, muscle_group, current_index = callback_query.data.split("_")
        current_index = int(current_index)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        workout = exercises[muscle_group][last_shown_plan[muscle_group]]
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if current_index >= len(workout) - 1:
            recommendations = exercise_recommendations.get(muscle_group, {})
            if recommendations:
                tips_text = "\n".join(recommendations["tips"])
                technique_text = recommendations["technique"]
                
                recommendation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º—ã—à—Ü", callback_data="workout")]
                ])
                
                await callback_query.message.edit_caption(
                    caption=f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {muscle_group}:\n\n"
                           f"{tips_text}\n\n"
                           f"‚ö°Ô∏è –¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
                           f"{technique_text}",
                    reply_markup=recommendation_keyboard
                )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        next_exercise = workout[current_index + 1]
        exercise_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"next_exercise_{muscle_group}_{current_index + 1}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º—ã—à—Ü", callback_data="workout")]
        ])
        
        await callback_query.message.edit_media(
            media=types.InputMediaPhoto(
                media=next_exercise["image"],
                caption=f"*{next_exercise['name']}*\n\n{next_exercise['description']}",
                parse_mode="Markdown"
            ),
            reply_markup=exercise_keyboard
        )
            
    except Exception as e:
        logger.error(f"Error in next exercise callback: {e}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=muscle_groups_keyboard
        )

async def main():
    try:
        logger.info("Starting bot...")
        await init_db()
        
        await bot.delete_webhook(drop_pending_updates=True)
        
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types(),
            close_bot_session=True
        )
    except Exception as e:
        logger.error(f"Critical error: {e}")
        sys.exit(1)
    finally:
        logger.info("Bot stopped")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped by user")
