from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
import random
import aiosqlite
import logging
from aiogram.exceptions import TelegramBadRequest

from states import UserStates
from keyboards import *
from config import HEALTH_TIPS, RECIPES, WORKOUT_TIPS, NUTRITION_TIPS, MOTIVATION_TIPS
from database import Database
from workout_manager import WorkoutSession
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
active_sessions = {}

async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await db.add_user(message.from_user.id, message.from_user.username)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–¥—Ä—É–≥"
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    
    welcome_text = (
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä, –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π!\n\n"
        "üî• –ß—Ç–æ —è —É–º–µ—é:\n"
        "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –ø—Ä–æ–≥—Ä–∞–º–º—ã, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –≤–µ—Å, –∫–∞–ª–æ—Ä–∏–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "üç≥ –ü–∏—Ç–∞–Ω–∏–µ ‚Äî —Ä–µ—Ü–µ–ø—Ç—ã, –¥–Ω–µ–≤–Ω–∏–∫, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n"
        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø–∏—Ç–∞–Ω–∏–µ\n"
        "üí° –°–æ–≤–µ—Ç—ã ‚Äî —Ñ–∏—Ç–Ω–µ—Å, –∑–¥–æ—Ä–æ–≤—å–µ\n\n"
        "–í—ã–±–∏—Ä–∞–π, —Å —á–µ–≥–æ –Ω–∞—á–Ω–µ–º! üí™"
    )
    
    try:
        await message.answer_photo(
            photo="https://i.imgur.com/U2KpzSU.jpg",
            caption=welcome_text,
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(welcome_text, reply_markup=get_main_keyboard())

async def process_menu_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –º–µ–Ω—é"""
    menu_type = callback.data.split("_")[1]
    
    try:
        menu_texts = {
            "workouts": "üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            "progress": "üìä –†–∞–∑–¥–µ–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:",
            "nutrition": "üç≥ –†–∞–∑–¥–µ–ª –ø–∏—Ç–∞–Ω–∏—è:",
            "reminders": "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
            "tips": "üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:"
        }
        
        menu_keyboards = {
            "workouts": get_workouts_keyboard(),
            "progress": get_progress_keyboard(),
            "nutrition": get_nutrition_keyboard(),
            "reminders": get_reminders_keyboard(),
            "tips": get_tips_keyboard()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer(
            menu_texts.get(menu_type, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
            reply_markup=menu_keyboards.get(menu_type)
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        try:
            await callback.message.delete()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_menu_selection: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )
    
    try:
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")

async def back_to_main_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    main_menu_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        await callback.message.answer_photo(
            photo="https://i.imgur.com/U2KpzSU.jpg",
            caption=main_menu_text,
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await callback.message.edit_text(
            main_menu_text,
            reply_markup=get_main_keyboard()
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
async def process_workout_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
    if callback.data == "workout_reminders":
        return
        
    workout_type = callback.data  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π callback_data
    user_id = callback.from_user.id
    
    session = WorkoutSession()
    first_exercise = session.start_workout(workout_type)
    active_sessions[user_id] = session
    
    if first_exercise == "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã":
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=get_workouts_keyboard()
        )
    else:
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
            await callback.message.answer_photo(
                photo=first_exercise["photo_url"],
                caption=f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
                       f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1: {first_exercise['name']}\n"
                       f"üëâ {first_exercise['description']}",
                reply_markup=get_exercise_keyboard(session)
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
                f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1: {first_exercise['name']}\n"
                f"üëâ {first_exercise['description']}",
                reply_markup=get_exercise_keyboard(session)
            )

async def process_exercise_navigation(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º"""
    user_id = callback.from_user.id
    session = active_sessions.get(user_id)
    
    if not session:
        await callback.answer("–°–µ—Å—Å–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if callback.data == "next_exercise":
        exercise = session.next_exercise()
    else:
        exercise = session.previous_exercise()
    
    if exercise:
        current_num = session.current_exercise + 1
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
            await callback.message.answer_photo(
                photo=exercise["photo_url"],
                caption=f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {current_num}: {exercise['name']}\n"
                       f"üëâ {exercise['description']}",
                reply_markup=get_exercise_keyboard(session)
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {current_num}: {exercise['name']}\n"
                f"üëâ {exercise['description']}",
                reply_markup=get_exercise_keyboard(session)
            )
    await callback.answer()

async def end_workout(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    user_id = callback.from_user.id
    session = active_sessions.get(user_id)
    
    if not session:
        await callback.answer("–°–µ—Å—Å–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    summary = session.get_workout_summary()
    await db.save_workout(
        user_id,
        summary['workout_type'],
        summary['duration'],
        summary['calories_burned'],
        summary['exercises_completed']
    )
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer(
            f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {summary['duration']} –º–∏–Ω—É—Ç\n"
            f"üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {summary['calories_burned']}\n"
            f"üí™ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {summary['exercises_completed']}",
            reply_markup=get_main_keyboard()
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )
    
    del active_sessions[user_id]
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def process_record_weight(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞"""
    await callback.message.edit_text(
        "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5):"
    )
    await state.set_state(UserStates.waiting_for_weight)
    await callback.answer()

async def save_weight(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        weight = float(message.text)
        if weight < 30 or weight > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 300 –∫–≥)")
            return
        
        await db.record_weight(message.from_user.id, weight)
        await state.clear()
        
        await message.answer(
            f"‚úÖ –í–µ—Å {weight} –∫–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_progress_keyboard()
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

async def process_record_measurements(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
    await callback.message.edit_text(
        "üìè –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º –≤–∞—à–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è!\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:"
    )
    await state.set_state(UserStates.waiting_for_chest)
    await callback.answer()

async def save_chest(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ö–≤–∞—Ç–∞ –≥—Ä—É–¥–∏"""
    chest = float(message.text)
    await state.update_data(chest=chest)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    await state.set_state(UserStates.waiting_for_waist)

async def save_waist(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ö–≤–∞—Ç–∞ —Ç–∞–ª–∏–∏"""
    waist = float(message.text)
    await state.update_data(waist=waist)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –±—ë–¥–µ—Ä –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    await state.set_state(UserStates.waiting_for_hips)

async def save_hips(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ö–≤–∞—Ç–∞ –±—ë–¥–µ—Ä"""
    hips = float(message.text)
    await state.update_data(hips=hips)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –±–∏—Ü–µ–ø—Å–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    await state.set_state(UserStates.waiting_for_biceps)

async def save_biceps(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ö–≤–∞—Ç–∞ –±–∏—Ü–µ–ø—Å–∞"""
    biceps = float(message.text)
    await state.update_data(biceps=biceps)
    await message.answer("–ò –Ω–∞–∫–æ–Ω–µ—Ü, –≤–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –±–µ–¥—Ä–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    await state.set_state(UserStates.waiting_for_thighs)

async def save_thighs(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
    thighs = float(message.text)
    data = await state.get_data()
    await db.record_measurements(
        message.from_user.id,
        data['chest'],
        data['waist'],
        data['hips'],
        data['biceps'],
        thighs
    )
    await state.clear()
    
    await message.answer(
        "‚úÖ –í—Å–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_progress_keyboard()
    )

async def process_show_statistics(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = await db.get_user_statistics(callback.from_user.id)
    if stats:
        total_workouts, total_duration, total_calories, total_exercises = stats
        await callback.message.edit_text(
            f"üìä –í–∞—à–∞ –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_workouts}\n"
            f"‚è± –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration} –º–∏–Ω—É—Ç\n"
            f"üî• –í—Å–µ–≥–æ —Å–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {total_calories}\n"
            f"üí™ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {total_exercises}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_progress_keyboard()
        )
    else:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_progress_keyboard()
        )
    await callback.answer()

async def process_show_progress(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Å–∞
    weight_history = await db.get_weight_history(callback.from_user.id)
    measurements_history = await db.get_measurements_history(callback.from_user.id)
    
    if not weight_history and not measurements_history:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤–µ—Å–µ –∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö.\n"
            "–ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ —É—á—ë—Ç, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_progress_keyboard()
        )
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
        text = "üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
        
        if weight_history:
            text += "‚öñÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞:\n"
            for weight, date in weight_history[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
                date_str = datetime.fromisoformat(date).strftime("%d.%m.%Y")
                text += f"{date_str}: {weight} –∫–≥\n"
            text += "\n"
        
        if measurements_history:
            text += "üìè –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:\n"
            chest, waist, hips, biceps, thighs, date = measurements_history[0]
            date_str = datetime.fromisoformat(date).strftime("%d.%m.%Y")
            text += f"–î–∞—Ç–∞: {date_str}\n"
            text += f"–ì—Ä—É–¥—å: {chest} —Å–º\n"
            text += f"–¢–∞–ª–∏—è: {waist} —Å–º\n"
            text += f"–ë—ë–¥—Ä–∞: {hips} —Å–º\n"
            text += f"–ë–∏—Ü–µ–ø—Å: {biceps} —Å–º\n"
            text += f"–ë–µ–¥—Ä–æ: {thighs} —Å–º\n"
        
        await callback.message.edit_text(
            text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_progress_keyboard()
        )
    
    await callback.answer()

async def show_health_tip(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é"""
    tip = random.choice(HEALTH_TIPS)
    await message.answer(f"üí° –°–æ–≤–µ—Ç –¥–Ω—è:\n\n{tip}", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def process_workout_reminder(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"""
    await callback.message.edit_text(
        "‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –æ–±—ã—á–Ω–æ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å?\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30):"
    )
    await state.set_state(UserStates.setting_workout_time)
    await callback.answer()

async def save_workout_time(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        time_str = message.text
        hour, minute = map(int, time_str.split(':'))
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError
        
        await state.update_data(workout_time=time_str)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π
        builder = InlineKeyboardBuilder()
        days = {
            "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "wednesday": "–°—Ä–µ–¥–∞",
            "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "saturday": "–°—É–±–±–æ—Ç–∞",
            "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        
        for day_key, day_name in days.items():
            builder.add(InlineKeyboardButton(
                text=f"‚òê {day_name}",
                callback_data=f"day_{day_key}"
            ))
        
        builder.add(InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
            callback_data="confirm_days"
        ))
        
        builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n"
            "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–µ–Ω—å, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä)",
            reply_markup=builder.as_markup()
        )
        await state.set_state(UserStates.setting_workout_days)
    except (ValueError, IndexError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–ß–ß:–ú–ú)")

async def process_day_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏, –∞ –Ω–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if not callback.data.startswith("day_") or callback.data == "day_stats":
            return
            
        day = callback.data.split('_')[1]
        current_text = callback.message.reply_markup.inline_keyboard
        
        days_mapping = {
            "monday": ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1),
            "tuesday": ("–í—Ç–æ—Ä–Ω–∏–∫", 2),
            "wednesday": ("–°—Ä–µ–¥–∞", 3),
            "thursday": ("–ß–µ—Ç–≤–µ—Ä–≥", 4),
            "friday": ("–ü—è—Ç–Ω–∏—Ü–∞", 5),
            "saturday": ("–°—É–±–±–æ—Ç–∞", 6),
            "sunday": ("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", 7)
        }
        
        if day not in days_mapping:
            logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ callback_data: {day}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        builder = InlineKeyboardBuilder()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        for row in current_text[:-1]:  # –ò—Å–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            button = row[0]
            day_key = button.callback_data.split('_')[1]
            
            if day_key not in days_mapping:
                continue
                
            day_name = days_mapping[day_key][0]
            
            if day_key == day:
                # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
                is_selected = "‚òë" in button.text
                new_text = f"‚òê {day_name}" if is_selected else f"‚òë {day_name}"
            else:
                new_text = button.text
            
            builder.add(InlineKeyboardButton(
                text=new_text,
                callback_data=f"day_{day_key}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        builder.add(InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
            callback_data="confirm_days"
        ))
        
        builder.adjust(1)
        
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_day_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    await callback.answer()

async def confirm_days_selection(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π"""
    selected_days = []
    days_mapping = {
        "monday": 1,
        "tuesday": 2,
        "wednesday": 3,
        "thursday": 4,
        "friday": 5,
        "saturday": 6,
        "sunday": 7
    }
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏
    for row in callback.message.reply_markup.inline_keyboard[:-1]:  # –ò—Å–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        button = row[0]
        if "‚òë" in button.text:
            day_key = button.callback_data.split('_')[1]
            selected_days.append(str(days_mapping[day_key]))
    
    if not selected_days:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å!", show_alert=True)
        return
    
    data = await state.get_data()
    workout_time = data.get('workout_time')
    days_str = ','.join(selected_days)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.save_workout_reminder(callback.from_user.id, workout_time, days_str)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä–∞ –¥–Ω–µ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    day_names = {
        "1": "–ü–Ω",
        "2": "–í—Ç",
        "3": "–°—Ä",
        "4": "–ß—Ç",
        "5": "–ü—Ç",
        "6": "–°–±",
        "7": "–í—Å"
    }
    selected_day_names = [day_names[day] for day in selected_days]
    
    await state.clear()
    await callback.message.edit_text(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n"
        f"–í—Ä–µ–º—è: {workout_time}\n"
        f"–î–Ω–∏: {', '.join(selected_day_names)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_reminders_keyboard()
    )
    await callback.answer()

async def process_meal_reminder(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∏—Ç–∞–Ω–∏–∏"""
    await callback.message.edit_text(
        "üçΩ –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø–∏—â—É? (–æ—Ç 3 –¥–æ 6):"
    )
    await state.set_state(UserStates.setting_meal_count)
    await callback.answer()

async def save_meal_count(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏"""
    try:
        meal_count = int(message.text)
        if not (3 <= meal_count <= 6):
            raise ValueError
        
        await state.update_data(meal_count=meal_count, current_meal=1, meal_times=[])
        await message.answer(
            f"–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è {1}-–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 08:00"
        )
        await state.set_state(UserStates.setting_meal_time)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 6")

async def save_meal_time(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏"""
    try:
        time_str = message.text
        hour, minute = map(int, time_str.split(':'))
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError
        
        data = await state.get_data()
        meal_count = data.get('meal_count')
        current_meal = data.get('current_meal')
        meal_times = data.get('meal_times', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –≤—Ä–µ–º—è –±—ã–ª–æ –ø–æ–∑–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
        if meal_times:
            last_time = meal_times[-1]
            last_hour, last_minute = map(int, last_time.split(':'))
            current_hour, current_minute = map(int, time_str.split(':'))
            if (current_hour < last_hour) or (current_hour == last_hour and current_minute <= last_minute):
                await message.answer(
                    f"–í—Ä–µ–º—è {time_str} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ ({last_time}).\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è {current_meal}-–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:"
                )
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–ø–∏—Å–æ–∫
        meal_times.append(time_str)
        await state.update_data(meal_times=meal_times, current_meal=current_meal + 1)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        if current_meal < meal_count:
            await message.answer(
                f"–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è {current_meal + 1}-–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 12:00"
            )
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            times_str = ','.join(meal_times)
            await db.save_meal_reminder(message.from_user.id, meal_count, times_str)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            times_display = '\n'.join([f"üïê {i+1}-–π –ø—Ä–∏–µ–º –ø–∏—â–∏: {time}" 
                                     for i, time in enumerate(meal_times)])
            
            await state.clear()
            await message.answer(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {meal_count}\n"
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{times_display}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_reminders_keyboard()
            )
    except (ValueError, IndexError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–ß–ß:–ú–ú)")

async def process_reminder_settings(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    workout_reminder = await db.get_workout_reminders(callback.from_user.id)
    meal_reminder = await db.get_meal_reminders(callback.from_user.id)
    
    workout_status = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    if workout_reminder:
        time, days = workout_reminder
        days_list = days.split(',')
        workout_status = f"–í—Ä–µ–º—è: {time}, –î–Ω–∏: {', '.join(days_list)}"
    
    meal_status = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    if meal_reminder:
        count, times_str = meal_reminder
        times_list = times_str.split(',')
        meal_times = '\n'.join([f"üïê {i+1}-–π –ø—Ä–∏–µ–º –ø–∏—â–∏: {time}" 
                               for i, time in enumerate(times_list)])
        meal_status = f"{count} —Ä–∞–∑(–∞) –≤ –¥–µ–Ω—å\n{meal_times}"
    
    await callback.message.edit_text(
        "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
        f"üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {workout_status}\n\n"
        f"üçΩ –ü–∏—Ç–∞–Ω–∏–µ: {meal_status}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_reminders_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ –ø–∏—Ç–∞–Ω–∏—è
async def process_nutrition_recipes(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    try:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="ü•ó –†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è", callback_data="recipes_loss"))
        builder.add(InlineKeyboardButton(text="üçñ –†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã", callback_data="recipes_gain"))
        builder.add(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_nutrition"))
        builder.adjust(1)
        
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:"
        
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                text=message_text,
                reply_markup=builder.as_markup()
            )
        except (AttributeError, TelegramBadRequest):
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.delete()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                text=message_text,
                reply_markup=builder.as_markup()
            )
        
        await callback.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_nutrition_recipes: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardBuilder()
                .add(InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                .as_markup()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
        
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def process_recipes_category(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    try:
        category = callback.data.split('_')[1]  # loss –∏–ª–∏ gain
        
        recipes = RECIPES.get(category, [])
        if not recipes:
            await callback.answer("–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
        for recipe in recipes:
            builder.add(InlineKeyboardButton(
                text=recipe['name'],
                callback_data=f"recipe_{category}_{recipes.index(recipe)}"
            ))
        
        builder.add(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="nutrition_recipes"))
        builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
        
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.delete()
            except:
                pass
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:",
                reply_markup=builder.as_markup()
            )
        
        await callback.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_recipes_category: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardBuilder()
                .add(InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                .as_markup()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
        
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def process_recipe_details(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —Ä–µ—Ü–µ–ø—Ç–∞"""
    try:
        _, category, recipe_index = callback.data.split('_')
        recipe_index = int(recipe_index)
        
        recipes = RECIPES.get(category, [])
        if not recipes or recipe_index >= len(recipes):
            await callback.answer("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        recipe = recipes[recipe_index]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect('fitness_bot.db') as db:
            async with db.execute(
                """
                SELECT weight 
                FROM weight_records 
                WHERE user_id = ? 
                ORDER BY recorded_at DESC 
                LIMIT 1
                """,
                (callback.from_user.id,)
            ) as cursor:
                weight_record = await cursor.fetchone()
        
        if not weight_record:
            # –ï—Å–ª–∏ –≤–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="üìä –ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å", callback_data="record_weight"))
            builder.add(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"recipes_{category}"))
            builder.adjust(1)
            
            await callback.message.edit_text(
                "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ—Ä—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å –≤–∞—à –≤–µ—Å.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:",
                reply_markup=builder.as_markup()
            )
            return
        
        user_weight = weight_record[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞
        text = f"üçΩ {recipe['name']} - {recipe['calories']} –∫–∫–∞–ª\n\n"
        text += "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–¥–ª—è –≤–∞—à–µ–≥–æ –≤–µ—Å–∞):\n"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ü–∏–π
        weight_multiplier = user_weight / recipe['base_weight']
        
        for ingredient, details in recipe['ingredients'].items():
            amount = details['amount']
            unit = details['unit']
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if unit != '—à—Ç':  # –ù–µ —É–º–Ω–æ–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —à—Ç—É—á–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
                amount = round(amount * weight_multiplier, 1)
            
            text += f"- {ingredient}: {amount} {unit}\n"
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ä–µ—Ü–µ–ø—Ç–æ–≤", callback_data=f"recipes_{category}"))
        builder.add(InlineKeyboardButton(text="‚Ü©Ô∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="nutrition_recipes"))
        builder.adjust(1)
        
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
            await callback.message.answer_photo(
                photo=recipe['photo_url'],
                caption=f"–†–µ—Ü–µ–ø—Ç –¥–ª—è –≤–µ—Å–∞ {user_weight} –∫–≥:\n\n{text}",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await callback.message.answer(
                f"–†–µ—Ü–µ–ø—Ç –¥–ª—è –≤–µ—Å–∞ {user_weight} –∫–≥:\n\n{text}",
                reply_markup=builder.as_markup()
            )
            
        await callback.answer()
        
    except Exception as e:
        # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="nutrition_recipes")
            ).as_markup()
        )

async def process_nutrition_calculator(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∫–∞–ª–æ—Ä–∏–π"""
    await state.set_state(UserStates.waiting_for_calc_weight)
    
    try:
        await callback.message.answer(
            "üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π\n\n"
            "–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –≤–∞—à—É —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5):"
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_nutrition_calculator: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )
    
    await callback.answer()

async def save_calc_weight(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∫–∞–ª–æ—Ä–∏–π"""
    try:
        weight = float(message.text)
        if weight < 30 or weight > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 300 –∫–≥)")
            return
        
        await state.update_data(weight=weight)
        await state.set_state(UserStates.waiting_for_height)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

async def save_height(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞"""
    try:
        height = float(message.text)
        if height < 100 or height > 250:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 100 –¥–æ 250 —Å–º)")
            return
        
        await state.update_data(height=height)
        await state.set_state(UserStates.waiting_for_age)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

async def save_age(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(message.text)
        if age < 14 or age > 100:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 14 –¥–æ 100 –ª–µ—Ç)")
            return
        
        await state.update_data(age=age)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male"))
        builder.add(InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female"))
        builder.adjust(2)
        
        await state.set_state(UserStates.waiting_for_gender)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=builder.as_markup())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

async def save_gender(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–∞"""
    gender = callback.data.split('_')[1]
    await state.update_data(gender=gender)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    builder = InlineKeyboardBuilder()
    activities = {
        "minimal": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞)",
        "low": "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ª–µ–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)",
        "medium": "–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—É–º–µ—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)",
        "high": "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)",
        "very_high": "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã)"
    }
    
    for key, value in activities.items():
        builder.add(InlineKeyboardButton(text=value, callback_data=f"activity_{key}"))
    
    builder.adjust(1)
    
    await state.set_state(UserStates.waiting_for_activity)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=builder.as_markup()
    )

async def calculate_calories(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π"""
    activity = callback.data.split('_')[1]
    data = await state.get_data()
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_factors = {
        "minimal": 1.2,
        "low": 1.375,
        "medium": 1.55,
        "high": 1.725,
        "very_high": 1.9
    }
    
    # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –æ–±–º–µ–Ω–∞ –≤–µ—â–µ—Å—Ç–≤ (—Ñ–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞)
    if data['gender'] == 'male':
        bmr = 10 * data['weight'] + 6.25 * data['height'] - 5 * data['age'] + 5
    else:
        bmr = 10 * data['weight'] + 6.25 * data['height'] - 5 * data['age'] - 161
    
    # –†–∞—Å—á–µ—Ç —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π
    daily_calories = round(bmr * activity_factors[activity])
    
    # –†–∞—Å—á–µ—Ç –Ω–æ—Ä–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π
    weight_loss = round(daily_calories * 0.85)  # –î–µ—Ñ–∏—Ü–∏—Ç 15%
    weight_gain = round(daily_calories * 1.15)  # –ü—Ä–æ—Ñ–∏—Ü–∏—Ç 15%
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_nutrition"))
    
    await callback.message.edit_text(
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π:\n\n"
        f"–í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_calories} –∫–∫–∞–ª\n\n"
        f"–î–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π:\n"
        f"üîΩ –°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞: {weight_loss} –∫–∫–∞–ª\n"
        f"‚û°Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞: {daily_calories} –∫–∫–∞–ª\n"
        f"üîº –ù–∞–±–æ—Ä –º–∞—Å—Å—ã: {weight_gain} –∫–∫–∞–ª\n\n"
        f"üí° –°–æ–≤–µ—Ç: –î–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è\n"
        f"–ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–ø—Ä–æ—Ñ–∏—Ü–∏—Ç–∞ –Ω–µ –±–æ–ª–µ–µ 15%",
        reply_markup=builder.as_markup()
    )
    
    await state.clear()

async def process_nutrition_diary(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏", callback_data="add_meal"))
    builder.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", callback_data="day_stats"))
    builder.add(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_nutrition"))
    builder.adjust(1)
    
    try:
        await callback.message.answer(
            "üìù –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=builder.as_markup()
        )
        
        await callback.message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_nutrition_diary: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )
    
    await callback.answer()

async def start_add_meal(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
    await state.set_state(UserStates.waiting_for_meal_name)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –±–ª—é–¥–∞:"
    )

async def save_meal_name(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    await state.update_data(meal_name=message.text)
    await state.set_state(UserStates.waiting_for_meal_calories)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π:")

async def save_meal_calories(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π"""
    try:
        calories = float(message.text)
        if calories < 0 or calories > 5000:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π (–æ—Ç 0 –¥–æ 5000)")
            return
        
        await state.update_data(calories=calories)
        await state.set_state(UserStates.waiting_for_meal_proteins)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

async def save_meal_proteins(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤"""
    try:
        proteins = float(message.text)
        if proteins < 0 or proteins > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ (–æ—Ç 0 –¥–æ 300)")
            return
        
        await state.update_data(proteins=proteins)
        await state.set_state(UserStates.waiting_for_meal_fats)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

async def save_meal_fats(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–∏—Ä–æ–≤"""
    try:
        fats = float(message.text)
        if fats < 0 or fats > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ (–æ—Ç 0 –¥–æ 300)")
            return
        
        await state.update_data(fats=fats)
        await state.set_state(UserStates.waiting_for_meal_carbs)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –≥—Ä–∞–º–º–∞—Ö:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

async def save_meal_carbs(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥–æ–≤ –∏ –≤—Å–µ–π –∑–∞–ø–∏—Å–∏"""
    try:
        carbs = float(message.text)
        if carbs < 0 or carbs > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–æ—Ç 0 –¥–æ 300)")
            return
        
        data = await state.get_data()
        current_time = datetime.now().strftime("%H:%M")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect('fitness_bot.db') as db:
            await db.execute("""
                INSERT INTO meal_diary (
                    user_id, meal_name, calories, proteins, fats, carbs, recorded_at
                ) VALUES (?, ?, ?, ?, ?, ?, datetime('now', 'localtime'))
            """, (
                message.from_user.id, data['meal_name'], data['calories'],
                data['proteins'], data['fats'], carbs
            ))
            await db.commit()
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å –µ—â–µ", callback_data="add_meal"))
        builder.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å", callback_data="day_stats"))
        builder.add(InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è", callback_data="menu_nutrition"))
        builder.adjust(1)
        
        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è!\n\n"
            f"üïê –í—Ä–µ–º—è: {current_time}\n"
            f"üçΩ –ü—Ä–æ–¥—É–∫—Ç: {data['meal_name']}\n"
            f"üìä –ù—É—Ç—Ä–∏–µ–Ω—Ç—ã:\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {data['calories']} –∫–∫–∞–ª\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {data['proteins']} –≥\n"
            f"‚Ä¢ –ñ–∏—Ä—ã: {data['fats']} –≥\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥",
            reply_markup=builder.as_markup()
        )
        
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

async def show_day_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å"""
    logging.info(f"–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è show_day_stats –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    try:
        async with aiosqlite.connect('fitness_bot.db') as db:
            logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –æ –≤–µ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logging.info("–ó–∞–ø—Ä–æ—Å –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î")
            async with db.execute("""
                SELECT weight FROM weight_records 
                WHERE user_id = ? 
                ORDER BY recorded_at DESC LIMIT 1
            """, (callback.from_user.id,)) as cursor:
                weight_record = await cursor.fetchone()
                logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –≤–µ—Å–µ: {weight_record}")

            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            logging.info("–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å")
            async with db.execute("""
                SELECT 
                    SUM(calories) as total_calories,
                    SUM(proteins) as total_proteins,
                    SUM(fats) as total_fats,
                    SUM(carbs) as total_carbs,
                    COUNT(*) as meals_count
                FROM meal_diary
                WHERE user_id = ? 
                AND date(recorded_at) = date('now', 'localtime')
            """, (callback.from_user.id,)) as cursor:
                stats = await cursor.fetchone()
                logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            logging.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏")
            async with db.execute("""
                SELECT meal_name, calories, proteins, fats, carbs, time(recorded_at)
                FROM meal_diary
                WHERE user_id = ? 
                AND date(recorded_at) = date('now', 'localtime')
                ORDER BY recorded_at
            """, (callback.from_user.id,)) as cursor:
                meals = await cursor.fetchall()
                logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {len(meals)}")
        
        if not stats[0]:  # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            logging.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏", callback_data="add_meal"))
            builder.add(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_nutrition"))
            builder.adjust(1)
            
            await callback.message.edit_text(
                "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –ø–∏—Ç–∞–Ω–∏—è.",
                reply_markup=builder.as_markup()
            )
            return
        
        total_calories, total_proteins, total_fats, total_carbs, meals_count = stats
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: –∫–∞–ª–æ—Ä–∏–∏={total_calories}, –±–µ–ª–∫–∏={total_proteins}, –∂–∏—Ä—ã={total_fats}, —É–≥–ª–µ–≤–æ–¥—ã={total_carbs}, –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏={meals_count}")
        
        # –†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –Ω–æ—Ä–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if weight_record:
            logging.info("–†–∞—Å—á–µ—Ç –Ω–æ—Ä–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–∞")
            weight = weight_record[0]
            recommended_calories = weight * 30
            recommended_proteins = weight * 2
            recommended_fats = weight * 1
            recommended_carbs = weight * 3
            
            calories_percent = round((total_calories / recommended_calories) * 100, 1)
            proteins_percent = round((total_proteins / recommended_proteins) * 100, 1)
            fats_percent = round((total_fats / recommended_fats) * 100, 1)
            carbs_percent = round((total_carbs / recommended_carbs) * 100, 1)
            
            logging.info(f"–ü—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –Ω–æ—Ä–º—ã: –∫–∞–ª–æ—Ä–∏–∏={calories_percent}%, –±–µ–ª–∫–∏={proteins_percent}%, –∂–∏—Ä—ã={fats_percent}%, —É–≥–ª–µ–≤–æ–¥—ã={carbs_percent}%")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            text += f"–í—Å–µ–≥–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {meals_count}\n\n"
            text += f"–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (% –æ—Ç –Ω–æ—Ä–º—ã):\n"
            text += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {total_calories:.1f} –∫–∫–∞–ª ({calories_percent}%)\n"
            text += f"‚Ä¢ –ë–µ–ª–∫–∏: {total_proteins:.1f} –≥ ({proteins_percent}%)\n"
            text += f"‚Ä¢ –ñ–∏—Ä—ã: {total_fats:.1f} –≥ ({fats_percent}%)\n"
            text += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.1f} –≥ ({carbs_percent}%)\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if calories_percent < 70:
                text += "‚ö†Ô∏è –ö–∞–ª–æ—Ä–∏–π –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏.\n"
            elif calories_percent > 130:
                text += "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–º–µ–Ω—å—à–∏—Ç—å –ø–æ—Ä—Ü–∏–∏.\n"
            
            if proteins_percent < 70:
                text += "üí™ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–ª–∫–∞. –î–æ–±–∞–≤—å—Ç–µ –º—è—Å–æ, —Ä—ã–±—É –∏–ª–∏ –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.\n"
        else:
            logging.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            text += f"–í—Å–µ–≥–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {meals_count}\n\n"
            text += f"–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
            text += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {total_calories:.1f} –∫–∫–∞–ª\n"
            text += f"‚Ä¢ –ë–µ–ª–∫–∏: {total_proteins:.1f} –≥\n"
            text += f"‚Ä¢ –ñ–∏—Ä—ã: {total_fats:.1f} –≥\n"
            text += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.1f} –≥\n\n"
            text += "‚ÑπÔ∏è –ó–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–æ—Ä–º.\n\n"
        
        text += "\n–ü—Ä–∏–µ–º—ã –ø–∏—â–∏:\n"
        for meal in meals:
            name, cals, prots, fats, carbs, time = meal
            time = time.split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            text += f"\nüïê {time}\n"
            text += f"üçΩ {name}\n"
            text += f"üìä {cals} –∫–∫–∞–ª (–ë: {prots}–≥, –ñ: {fats}–≥, –£: {carbs}–≥)\n"
        
        logging.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏", callback_data="add_meal"))
        builder.add(InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è", callback_data="menu_nutrition"))
        builder.adjust(1)
        
        try:
            logging.info("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
            await callback.message.edit_text(text, reply_markup=builder.as_markup())
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        except TelegramBadRequest as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            logging.info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            await callback.message.answer(text, reply_markup=builder.as_markup())
            try:
                logging.info("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                await callback.message.delete()
                logging.info("–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_day_stats: {str(e)}")
        logging.exception(e)  # –≠—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu_nutrition")
            ).as_markup()
        )
    
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è show_day_stats")
    await callback.answer()

async def process_tips_section(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —Å–æ–≤–µ—Ç–æ–≤"""
    try:
        tips_type = callback.data.split('_')[1]
        
        tips_mapping = {
            'workout': WORKOUT_TIPS,
            'nutrition': NUTRITION_TIPS,
            'motivation': MOTIVATION_TIPS
        }
        
        titles_mapping = {
            'workout': 'üèãÔ∏è –°–æ–≤–µ—Ç—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º',
            'nutrition': 'ü•ó –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é',
            'motivation': 'üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è'
        }
        
        tips = tips_mapping.get(tips_type, [])
        title = titles_mapping.get(tips_type, '–°–æ–≤–µ—Ç—ã')
        
        if not tips:
            await callback.answer("–°–æ–≤–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        tip = random.choice(tips)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                f"{title}\n\n{tip}",
                reply_markup=get_tips_keyboard()
            )
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.delete()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–≤–µ—Ç–∞: {e}")
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_tips_keyboard()
            )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_tips_section: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
            pass
    
    await callback.answer()

async def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(cmd_start, Command(commands=["start"]))
    dp.message.register(show_health_tip, Command(commands=["tip"]))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    dp.callback_query.register(back_to_main_menu, F.data == "back_to_main")
    dp.callback_query.register(process_menu_selection, F.data.startswith("menu_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    dp.callback_query.register(process_workout_selection, F.data.startswith("workout_"))
    dp.callback_query.register(process_exercise_navigation, F.data.in_(["next_exercise", "prev_exercise"]))
    dp.callback_query.register(end_workout, F.data == "end_workout")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    dp.callback_query.register(process_record_weight, F.data == "record_weight")
    dp.callback_query.register(process_record_measurements, F.data == "record_measurements")
    dp.callback_query.register(process_show_statistics, F.data == "show_statistics")
    dp.callback_query.register(process_show_progress, F.data == "show_progress")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è
    dp.callback_query.register(process_nutrition_recipes, F.data == "nutrition_recipes")
    dp.callback_query.register(process_recipes_category, F.data.startswith("recipes_"))
    dp.callback_query.register(process_recipe_details, F.data.startswith("recipe_"))
    dp.callback_query.register(process_nutrition_calculator, F.data == "nutrition_calculator")
    dp.callback_query.register(process_nutrition_diary, F.data == "nutrition_diary")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    dp.callback_query.register(process_workout_reminder, F.data == "workout_reminders")
    dp.callback_query.register(process_meal_reminder, F.data == "meal_reminders")
    dp.callback_query.register(process_reminder_settings, F.data == "reminder_settings")
    dp.callback_query.register(process_day_selection, F.data.startswith("day_"))
    dp.callback_query.register(confirm_days_selection, F.data == "confirm_days")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–≤–µ—Ç–æ–≤
    dp.callback_query.register(process_tips_section, F.data.startswith("tips_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.register(save_weight, UserStates.waiting_for_weight)
    dp.message.register(save_chest, UserStates.waiting_for_chest)
    dp.message.register(save_waist, UserStates.waiting_for_waist)
    dp.message.register(save_hips, UserStates.waiting_for_hips)
    dp.message.register(save_biceps, UserStates.waiting_for_biceps)
    dp.message.register(save_thighs, UserStates.waiting_for_thighs)
    dp.message.register(save_workout_time, UserStates.setting_workout_time)
    dp.message.register(save_meal_count, UserStates.setting_meal_count)
    dp.message.register(save_meal_time, UserStates.setting_meal_time)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∫–∞–ª–æ—Ä–∏–π
    dp.callback_query.register(process_nutrition_calculator, F.data == "nutrition_calculator")
    dp.message.register(save_calc_weight, UserStates.waiting_for_calc_weight)
    dp.message.register(save_height, UserStates.waiting_for_height)
    dp.message.register(save_age, UserStates.waiting_for_age)
    dp.callback_query.register(save_gender, F.data.startswith("gender_"))
    dp.callback_query.register(calculate_calories, F.data.startswith("activity_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
    dp.callback_query.register(process_nutrition_diary, F.data == "nutrition_diary")
    dp.callback_query.register(start_add_meal, F.data == "add_meal")
    dp.callback_query.register(show_day_stats, F.data == "day_stats")
    dp.message.register(save_meal_name, UserStates.waiting_for_meal_name)
    dp.message.register(save_meal_calories, UserStates.waiting_for_meal_calories)
    dp.message.register(save_meal_proteins, UserStates.waiting_for_meal_proteins)
    dp.message.register(save_meal_fats, UserStates.waiting_for_meal_fats)
    dp.message.register(save_meal_carbs, UserStates.waiting_for_meal_carbs) 